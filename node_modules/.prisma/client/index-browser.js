
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  role: 'role',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  planName: 'planName',
  price: 'price',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  amount: 'amount',
  status: 'status',
  dueDate: 'dueDate',
  paidAt: 'paidAt',
  createdAt: 'createdAt'
};

exports.Prisma.MikrotikDeviceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  ip: 'ip',
  mac: 'mac',
  username: 'username',
  password: 'password',
  port: 'port',
  status: 'status',
  model: 'model',
  version: 'version',
  uptime: 'uptime',
  cpu: 'cpu',
  memory: 'memory',
  interfaces: 'interfaces',
  lastSeen: 'lastSeen',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DomainScalarFieldEnum = {
  id: 'id',
  name: 'name',
  cloudflareId: 'cloudflareId',
  status: 'status',
  nameservers: 'nameservers',
  created: 'created',
  expires: 'expires',
  sslStatus: 'sslStatus',
  dnsRecords: 'dnsRecords',
  raw: 'raw',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProxmoxServerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  baseUrl: 'baseUrl',
  user: 'user',
  tokenId: 'tokenId',
  tokenSecret: 'tokenSecret',
  insecure: 'insecure',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProxmoxNodeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  status: 'status',
  maxcpu: 'maxcpu',
  maxmem: 'maxmem',
  cpu: 'cpu',
  mem: 'mem',
  uptime: 'uptime',
  raw: 'raw',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  serverId: 'serverId'
};

exports.Prisma.ProxmoxVMScalarFieldEnum = {
  id: 'id',
  vmid: 'vmid',
  nodeName: 'nodeName',
  serverId: 'serverId',
  name: 'name',
  type: 'type',
  status: 'status',
  maxcpu: 'maxcpu',
  maxmem: 'maxmem',
  cpu: 'cpu',
  mem: 'mem',
  tags: 'tags',
  sshHost: 'sshHost',
  sshPort: 'sshPort',
  sshUser: 'sshUser',
  raw: 'raw',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProxmoxMetricScalarFieldEnum = {
  id: 'id',
  vmId: 'vmId',
  vmNumericId: 'vmNumericId',
  nodeName: 'nodeName',
  serverId: 'serverId',
  cpu: 'cpu',
  mem: 'mem',
  disk: 'disk',
  netin: 'netin',
  netout: 'netout',
  ts: 'ts'
};

exports.Prisma.SiteScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  notes: 'notes',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  vid: 'vid',
  siteId: 'siteId',
  description: 'description',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NetworkSubnetScalarFieldEnum = {
  id: 'id',
  cidr: 'cidr',
  name: 'name',
  description: 'description',
  siteId: 'siteId',
  vlanId: 'vlanId',
  parentId: 'parentId',
  gatewayIpId: 'gatewayIpId',
  tags: 'tags',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NetworkIPScalarFieldEnum = {
  id: 'id',
  address: 'address',
  subnetId: 'subnetId',
  status: 'status',
  deviceId: 'deviceId',
  interface: 'interface',
  fqdn: 'fqdn',
  purpose: 'purpose',
  mac: 'mac',
  tags: 'tags',
  notes: 'notes',
  lastSeen: 'lastSeen',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NetworkDeviceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  siteId: 'siteId',
  mgmtIp: 'mgmtIp',
  vendor: 'vendor',
  model: 'model',
  serial: 'serial',
  osVersion: 'osVersion',
  tags: 'tags',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NetworkServiceScalarFieldEnum = {
  id: 'id',
  deviceId: 'deviceId',
  name: 'name',
  protocol: 'protocol',
  port: 'port',
  externalPort: 'externalPort',
  targetIp: 'targetIp',
  targetFqdn: 'targetFqdn',
  enabled: 'enabled',
  description: 'description',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.IPStatus = exports.$Enums.IPStatus = {
  AVAILABLE: 'AVAILABLE',
  RESERVED: 'RESERVED',
  ASSIGNED: 'ASSIGNED'
};

exports.DeviceType = exports.$Enums.DeviceType = {
  ROUTER: 'ROUTER',
  SWITCH: 'SWITCH',
  FIREWALL: 'FIREWALL',
  SERVER: 'SERVER',
  VM: 'VM',
  AP: 'AP',
  NAS: 'NAS',
  OTHER: 'OTHER'
};

exports.Protocol = exports.$Enums.Protocol = {
  TCP: 'TCP',
  UDP: 'UDP',
  SCTP: 'SCTP',
  ICMP: 'ICMP',
  OTHER: 'OTHER'
};

exports.Prisma.ModelName = {
  User: 'User',
  Subscription: 'Subscription',
  Invoice: 'Invoice',
  MikrotikDevice: 'MikrotikDevice',
  Domain: 'Domain',
  ProxmoxServer: 'ProxmoxServer',
  ProxmoxNode: 'ProxmoxNode',
  ProxmoxVM: 'ProxmoxVM',
  ProxmoxMetric: 'ProxmoxMetric',
  Site: 'Site',
  Vlan: 'Vlan',
  NetworkSubnet: 'NetworkSubnet',
  NetworkIP: 'NetworkIP',
  NetworkDevice: 'NetworkDevice',
  NetworkService: 'NetworkService'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
