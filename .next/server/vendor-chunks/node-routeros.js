"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-routeros";
exports.ids = ["vendor-chunks/node-routeros"];
exports.modules = {

/***/ "(rsc)/./node_modules/node-routeros/dist/Channel.js":
/*!****************************************************!*\
  !*** ./node_modules/node-routeros/dist/Channel.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst RosException_1 = __webpack_require__(/*! ./RosException */ \"(rsc)/./node_modules/node-routeros/dist/RosException.js\");\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\");\nconst info = debug('routeros-api:channel:info');\nconst error = debug('routeros-api:channel:error');\n/**\n * Channel class is responsible for generating\n * ids for the channels and writing over\n * the ids generated, while listening for\n * their responses\n */\nclass Channel extends events_1.EventEmitter {\n    /**\n     * Constructor\n     *\n     * @param {Connector} connector\n     */\n    constructor(connector) {\n        super();\n        /**\n         * Data received related to the channel\n         */\n        this.data = [];\n        /**\n         * If received a trap instead of a positive response\n         */\n        this.trapped = false;\n        /**\n         * If is streaming content\n         */\n        this.streaming = false;\n        this.id = Math.random().toString(36).substring(3);\n        this.connector = connector;\n        this.once('unknown', this.onUnknown.bind(this));\n    }\n    /**\n     * Get the id of the channel\n     *\n     * @returns {string}\n     */\n    get Id() {\n        return this.id;\n    }\n    /**\n     * Get the connector used in the channel\n     *\n     * @returns {Connector}\n     */\n    get Connector() {\n        return this.connector;\n    }\n    /**\n     * Organize the data to be written over the socket with the id\n     * generated. Adds a reader to the id provided, so we wait for\n     * the data.\n     *\n     * @param {Array} params\n     * @returns {Promise}\n     */\n    write(params, isStream = false, returnPromise = true) {\n        this.streaming = isStream;\n        params.push('.tag=' + this.id);\n        if (returnPromise) {\n            this.on('data', (packet) => this.data.push(packet));\n            return new Promise((resolve, reject) => {\n                this.once('done', (data) => resolve(data));\n                this.once('trap', (data) => reject(new Error(data.message)));\n                this.readAndWrite(params);\n            });\n        }\n        this.readAndWrite(params);\n        return;\n    }\n    /**\n     * Closes the channel, algo asking for\n     * the connector to remove the reader.\n     * If streaming, not forcing will only stop\n     * the reader, not the listeners of the events\n     *\n     * @param {boolean} force - force closing by removing all listeners\n     */\n    close(force = false) {\n        this.emit('close');\n        if (!this.streaming || force) {\n            this.removeAllListeners();\n        }\n        this.connector.stopRead(this.id);\n    }\n    /**\n     * Register the reader for the tag and write the params over\n     * the socket\n     *\n     * @param {Array} params\n     */\n    readAndWrite(params) {\n        this.connector.read(this.id, (packet) => this.processPacket(packet));\n        this.connector.write(params);\n    }\n    /**\n     * Process the data packet received to\n     * figure out the answer to give to the\n     * channel listener, either if it's just\n     * the data we were expecting or if\n     * a trap was given.\n     *\n     * @param {Array} packet\n     */\n    processPacket(packet) {\n        const reply = packet.shift();\n        info('Processing reply %s with data %o', reply, packet);\n        const parsed = this.parsePacket(packet);\n        if (reply === '!trap') {\n            this.trapped = true;\n            this.emit('trap', parsed);\n            return;\n        }\n        if (packet.length > 0 && !this.streaming)\n            this.emit('data', parsed);\n        switch (reply) {\n            case '!re':\n                if (this.streaming)\n                    this.emit('stream', parsed);\n                break;\n            case '!done':\n                if (!this.trapped)\n                    this.emit('done', this.data);\n                this.close();\n                break;\n            default:\n                this.emit('unknown', reply);\n                this.close();\n                break;\n        }\n    }\n    /**\n     * Parse the packet line, separating the key from the data.\n     * Ex: transform '=interface=ether2' into object {interface:'ether2'}\n     *\n     * @param {Array} packet\n     * @return {Object}\n     */\n    parsePacket(packet) {\n        const obj = {};\n        for (const line of packet) {\n            const linePair = line.split('=');\n            linePair.shift(); // remove empty index\n            obj[linePair.shift()] = linePair.join('=');\n        }\n        info('Parsed line, got %o as result', obj);\n        return obj;\n    }\n    /**\n     * Waits for the unknown event.\n     * It shouldn't happen, but if it does, throws the error and\n     * stops the channel\n     *\n     * @param {string} reply\n     * @returns {function}\n     */\n    onUnknown(reply) {\n        throw new RosException_1.RosException('UNKNOWNREPLY', { reply: reply });\n    }\n}\nexports.Channel = Channel;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhbm5lbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9DaGFubmVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQXNDO0FBRXRDLGlEQUE4QztBQUM5QywrQkFBK0I7QUFHL0IsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7QUFDaEQsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7QUFFbEQ7Ozs7O0dBS0c7QUFDSCxNQUFhLE9BQVEsU0FBUSxxQkFBWTtJQTBCckM7Ozs7T0FJRztJQUNILFlBQVksU0FBb0I7UUFDNUIsS0FBSyxFQUFFLENBQUM7UUFyQlo7O1dBRUc7UUFDSyxTQUFJLEdBQVUsRUFBRSxDQUFDO1FBRXpCOztXQUVHO1FBQ0ssWUFBTyxHQUFZLEtBQUssQ0FBQztRQUVqQzs7V0FFRztRQUNLLGNBQVMsR0FBWSxLQUFLLENBQUM7UUFTL0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBSSxFQUFFO1FBQ0YsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDO0lBQ25CLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBSSxTQUFTO1FBQ1QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0ksS0FBSyxDQUNSLE1BQWdCLEVBQ2hCLFFBQVEsR0FBRyxLQUFLLEVBQ2hCLGFBQWEsR0FBRyxJQUFJO1FBRXBC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//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-routeros/dist/Channel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-routeros/dist/RStream.js":
/*!****************************************************!*\
  !*** ./node_modules/node-routeros/dist/RStream.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst Channel_1 = __webpack_require__(/*! ./Channel */ \"(rsc)/./node_modules/node-routeros/dist/Channel.js\");\nconst RosException_1 = __webpack_require__(/*! ./RosException */ \"(rsc)/./node_modules/node-routeros/dist/RosException.js\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/node-routeros/dist/utils.js\");\n/**\n * Stream class is responsible for handling\n * continuous data from some parts of the\n * routeros, like /ip/address/listen or\n * /tool/torch which keeps sending data endlessly.\n * It is also possible to pause/resume/stop generated\n * streams.\n */\nclass RStream extends events_1.EventEmitter {\n    /**\n     * Constructor, it also starts the streaming after construction\n     *\n     * @param {Channel} channel\n     * @param {Array} params\n     * @param {function} callback\n     */\n    constructor(channel, params, callback) {\n        super();\n        /** Flag for turning on empty data debouncing */\n        this.shouldDebounceEmptyData = false;\n        /**\n         * If is streaming flag\n         */\n        this.streaming = true;\n        /**\n         * If is pausing flag\n         */\n        this.pausing = false;\n        /**\n         * If is paused flag\n         */\n        this.paused = false;\n        /**\n         * If is stopping flag\n         */\n        this.stopping = false;\n        /**\n         * If is stopped flag\n         */\n        this.stopped = false;\n        /**\n         * If got a trap error\n         */\n        this.trapped = false;\n        /**\n         * Save the current section of the packet, if has any\n         */\n        this.currentSection = null;\n        this.forcelyStop = false;\n        /**\n         * Store the current section in a single\n         * array before sending when another section comes\n         */\n        this.currentSectionPacket = [];\n        this.channel = channel;\n        this.params = params;\n        this.callback = callback;\n    }\n    /**\n     * Function to receive the callback which\n     * will receive data, if not provided over the\n     * constructor or changed later after the streaming\n     * have started.\n     *\n     * @param {function} callback\n     */\n    data(callback) {\n        this.callback = callback;\n    }\n    /**\n     * Resume the paused stream, using the same channel\n     *\n     * @returns {Promise}\n     */\n    resume() {\n        if (this.stopped || this.stopping)\n            return Promise.reject(new RosException_1.RosException('STREAMCLOSD'));\n        if (!this.streaming) {\n            this.pausing = false;\n            this.start();\n            this.streaming = true;\n        }\n        return Promise.resolve();\n    }\n    /**\n     * Pause the stream, but don't destroy the channel\n     *\n     * @returns {Promise}\n     */\n    pause() {\n        if (this.stopped || this.stopping)\n            return Promise.reject(new RosException_1.RosException('STREAMCLOSD'));\n        if (this.pausing || this.paused)\n            return Promise.resolve();\n        if (this.streaming) {\n            this.pausing = true;\n            return this.stop(true)\n                .then(() => {\n                this.pausing = false;\n                this.paused = true;\n                return Promise.resolve();\n            })\n                .catch((err) => {\n                return Promise.reject(err);\n            });\n        }\n        return Promise.resolve();\n    }\n    /**\n     * Stop the stream entirely, can't re-stream after\n     * this if called directly.\n     *\n     * @returns {Promise}\n     */\n    stop(pausing = false) {\n        if (this.stopped || this.stopping)\n            return Promise.resolve();\n        if (!pausing)\n            this.forcelyStop = true;\n        if (this.paused) {\n            this.streaming = false;\n            this.stopping = false;\n            this.stopped = true;\n            if (this.channel)\n                this.channel.close(true);\n            return Promise.resolve();\n        }\n        if (!this.pausing)\n            this.stopping = true;\n        let chann = new Channel_1.Channel(this.channel.Connector);\n        chann.on('close', () => {\n            chann = null;\n        });\n        if (this.debounceSendingEmptyData)\n            this.debounceSendingEmptyData.cancel();\n        return chann\n            .write(['/cancel', '=tag=' + this.channel.Id])\n            .then(() => {\n            this.streaming = false;\n            if (!this.pausing) {\n                this.stopping = false;\n                this.stopped = true;\n            }\n            this.emit('stopped');\n            return Promise.resolve();\n        })\n            .catch((err) => {\n            return Promise.reject(err);\n        });\n    }\n    /**\n     * Alias for stop()\n     */\n    close() {\n        return this.stop();\n    }\n    /**\n     * Write over the connection and start the stream\n     */\n    start() {\n        if (!this.stopped && !this.stopping) {\n            this.channel.on('close', () => {\n                if (this.forcelyStop || (!this.pausing && !this.paused)) {\n                    if (!this.trapped)\n                        this.emit('done');\n                    this.emit('close');\n                }\n                this.stopped = false;\n            });\n            this.channel.on('stream', (packet) => {\n                if (this.debounceSendingEmptyData)\n                    this.debounceSendingEmptyData.run();\n                this.onStream(packet);\n            });\n            this.channel.once('trap', this.onTrap.bind(this));\n            this.channel.once('done', this.onDone.bind(this));\n            this.channel.write(this.params.slice(), true, false);\n            this.emit('started');\n            if (this.shouldDebounceEmptyData)\n                this.prepareDebounceEmptyData();\n        }\n    }\n    prepareDebounceEmptyData() {\n        this.shouldDebounceEmptyData = true;\n        const intervalParam = this.params.find((param) => {\n            return /=interval=/.test(param);\n        });\n        let interval = 2000;\n        if (intervalParam) {\n            const val = intervalParam.split('=')[2];\n            interval = parseInt(val, null) * 1000;\n        }\n        this.debounceSendingEmptyData = utils_1.debounce(() => {\n            if (!this.stopped ||\n                !this.stopping ||\n                !this.paused ||\n                !this.pausing) {\n                this.onStream([]);\n                this.debounceSendingEmptyData.run();\n            }\n        }, interval + 300);\n    }\n    /**\n     * When receiving the stream packet, give it to\n     * the callback\n     *\n     * @returns {function}\n     */\n    onStream(packet) {\n        this.emit('data', packet);\n        if (this.callback) {\n            if (packet['.section']) {\n                timers_1.clearTimeout(this.sectionPacketSendingTimeout);\n                const sendData = () => {\n                    this.callback(null, this.currentSectionPacket.slice(), this);\n                    this.currentSectionPacket = [];\n                };\n                this.sectionPacketSendingTimeout = timers_1.setTimeout(sendData.bind(this), 300);\n                if (this.currentSectionPacket.length > 0 &&\n                    packet['.section'] !== this.currentSection) {\n                    timers_1.clearTimeout(this.sectionPacketSendingTimeout);\n                    sendData();\n                }\n                this.currentSection = packet['.section'];\n                this.currentSectionPacket.push(packet);\n            }\n            else {\n                this.callback(null, packet, this);\n            }\n        }\n    }\n    /**\n     * When receiving a trap over the connection,\n     * when pausing, will receive a 'interrupted' message,\n     * this will not be considered as an error but a flag\n     * for the pause and resume function\n     *\n     * @returns {function}\n     */\n    onTrap(data) {\n        if (data.message === 'interrupted') {\n            this.streaming = false;\n        }\n        else {\n            this.stopped = true;\n            this.trapped = true;\n            if (this.callback) {\n                this.callback(new Error(data.message), null, this);\n            }\n            else {\n                this.emit('error', data);\n            }\n            this.emit('trap', data);\n        }\n    }\n    /**\n     * When the channel stops sending data.\n     * It will close the channel if the\n     * intention was stopping it.\n     *\n     * @returns {function}\n     */\n    onDone() {\n        if (this.stopped && this.channel) {\n            this.channel.close(true);\n        }\n    }\n}\nexports.RStream = RStream;\n//# sourceMappingURL=data:application/json;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-routeros/dist/RStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-routeros/dist/RosException.js":
/*!*********************************************************!*\
  !*** ./node_modules/node-routeros/dist/RosException.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst messages_1 = __webpack_require__(/*! ./messages */ \"(rsc)/./node_modules/node-routeros/dist/messages.js\");\n/**\n * RouterOS Exception Handler\n */\nclass RosException extends Error {\n    constructor(errno, extras) {\n        super();\n        // Maintains proper stack trace for where our error was thrown\n        Error.captureStackTrace(this, this.constructor);\n        this.name = this.constructor.name;\n        // Custom debugging information\n        this.errno = errno;\n        let message = messages_1.default[errno];\n        if (message) {\n            for (const key in extras) {\n                if (extras.hasOwnProperty(key)) {\n                    message = message.replace(`{{${key}}}`, extras[key]);\n                }\n            }\n            this.message = message;\n        }\n    }\n}\nexports.RosException = RosException;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUm9zRXhjZXB0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1Jvc0V4Y2VwdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUFrQztBQUVsQzs7R0FFRztBQUNILE1BQWEsWUFBYSxTQUFRLEtBQUs7SUFHbkMsWUFBWSxLQUFhLEVBQUUsTUFBWTtRQUNuQyxLQUFLLEVBQUUsQ0FBQztRQUVSLDhEQUE4RDtRQUM5RCxLQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUVoRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO1FBRWxDLCtCQUErQjtRQUMvQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUVuQixJQUFJLE9BQU8sR0FBRyxrQkFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTlCLElBQUksT0FBTyxFQUFFO1lBQ1QsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUU7Z0JBQ3RCLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDNUIsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFDeEQ7YUFDSjtZQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1NBQzFCO0lBQ0wsQ0FBQztDQUNKO0FBekJELG9DQXlCQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1yb3V0ZXJvcy9kaXN0L1Jvc0V4Y2VwdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUIsbUJBQU8sQ0FBQyx1RUFBWTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsRUFBRSxNQUFNO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zaXN0ZW1hLWFzc2luYXR1cmFzLy4vbm9kZV9tb2R1bGVzL25vZGUtcm91dGVyb3MvZGlzdC9Sb3NFeGNlcHRpb24uanM/OGQzMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IG1lc3NhZ2VzXzEgPSByZXF1aXJlKFwiLi9tZXNzYWdlc1wiKTtcbi8qKlxuICogUm91dGVyT1MgRXhjZXB0aW9uIEhhbmRsZXJcbiAqL1xuY2xhc3MgUm9zRXhjZXB0aW9uIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGVycm5vLCBleHRyYXMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLy8gTWFpbnRhaW5zIHByb3BlciBzdGFjayB0cmFjZSBmb3Igd2hlcmUgb3VyIGVycm9yIHdhcyB0aHJvd25cbiAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICAgICAgLy8gQ3VzdG9tIGRlYnVnZ2luZyBpbmZvcm1hdGlvblxuICAgICAgICB0aGlzLmVycm5vID0gZXJybm87XG4gICAgICAgIGxldCBtZXNzYWdlID0gbWVzc2FnZXNfMS5kZWZhdWx0W2Vycm5vXTtcbiAgICAgICAgaWYgKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGV4dHJhcykge1xuICAgICAgICAgICAgICAgIGlmIChleHRyYXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKGB7eyR7a2V5fX19YCwgZXh0cmFzW2tleV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlJvc0V4Y2VwdGlvbiA9IFJvc0V4Y2VwdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVVtOXpSWGhqWlhCMGFXOXVMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZjM0pqTDFKdmMwVjRZMlZ3ZEdsdmJpNTBjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQkxIbERRVUZyUXp0QlFVVnNRenM3UjBGRlJ6dEJRVU5JTEUxQlFXRXNXVUZCWVN4VFFVRlJMRXRCUVVzN1NVRkhia01zV1VGQldTeExRVUZoTEVWQlFVVXNUVUZCV1R0UlFVTnVReXhMUVVGTExFVkJRVVVzUTBGQlF6dFJRVVZTTERoRVFVRTRSRHRSUVVNNVJDeExRVUZMTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenRSUVVWb1JDeEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETzFGQlJXeERMQ3RDUVVFclFqdFJRVU12UWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF6dFJRVVZ1UWl4SlFVRkpMRTlCUVU4c1IwRkJSeXhyUWtGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMUZCUlRsQ0xFbEJRVWtzVDBGQlR5eEZRVUZGTzFsQlExUXNTMEZCU3l4TlFVRk5MRWRCUVVjc1NVRkJTU3hOUVVGTkxFVkJRVVU3WjBKQlEzUkNMRWxCUVVrc1RVRkJUU3hEUVVGRExHTkJRV01zUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlR0dlFrRkROVUlzVDBGQlR5eEhRVUZITEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhIUVVGSExFbEJRVWtzUlVGQlJTeE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRenRwUWtGRGVFUTdZVUZEU2p0WlFVTkVMRWxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETzFOQlF6RkNPMGxCUTB3c1EwRkJRenREUVVOS08wRkJla0pFTEc5RFFYbENReUo5Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-routeros/dist/RosException.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-routeros/dist/RouterOSAPI.js":
/*!********************************************************!*\
  !*** ./node_modules/node-routeros/dist/RouterOSAPI.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst Connector_1 = __webpack_require__(/*! ./connector/Connector */ \"(rsc)/./node_modules/node-routeros/dist/connector/Connector.js\");\nconst Channel_1 = __webpack_require__(/*! ./Channel */ \"(rsc)/./node_modules/node-routeros/dist/Channel.js\");\nconst RosException_1 = __webpack_require__(/*! ./RosException */ \"(rsc)/./node_modules/node-routeros/dist/RosException.js\");\nconst RStream_1 = __webpack_require__(/*! ./RStream */ \"(rsc)/./node_modules/node-routeros/dist/RStream.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\");\nconst timers_1 = __webpack_require__(/*! timers */ \"timers\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst info = debug('routeros-api:api:info');\nconst error = debug('routeros-api:api:error');\n/**\n * Creates a connection object with the credentials provided\n */\nclass RouterOSAPI extends events_1.EventEmitter {\n    /**\n     * Constructor, also sets the language of the thrown errors\n     *\n     * @param {Object} options\n     */\n    constructor(options) {\n        super();\n        /**\n         * Connected flag\n         */\n        this.connected = false;\n        /**\n         * Connecting flag\n         */\n        this.connecting = false;\n        /**\n         * Closing flag\n         */\n        this.closing = false;\n        /**\n         * Counter for channels open\n         */\n        this.channelsOpen = 0;\n        /**\n         * Flag if the connection was held by the keepalive parameter\n         * or keepaliveBy function\n         */\n        this.holdingConnectionWithKeepalive = false;\n        this.registeredStreams = [];\n        this.setOptions(options);\n    }\n    /**\n     * Set connection options, affects before connecting\n     *\n     * @param options connection options\n     */\n    setOptions(options) {\n        this.host = options.host;\n        this.user = options.user;\n        this.password = options.password;\n        this.port = options.port || 8728;\n        this.timeout = options.timeout || 10;\n        this.tls = options.tls;\n        this.keepalive = options.keepalive || false;\n    }\n    /**\n     * Tries a connection to the routerboard with the provided credentials\n     *\n     * @returns {Promise}\n     */\n    connect() {\n        if (this.connecting)\n            return Promise.reject('ALRDYCONNECTING');\n        if (this.connected)\n            return Promise.resolve(this);\n        info('Connecting on %s', this.host);\n        this.connecting = true;\n        this.connected = false;\n        this.connector = new Connector_1.Connector({\n            host: this.host,\n            port: this.port,\n            timeout: this.timeout,\n            tls: this.tls,\n        });\n        return new Promise((resolve, reject) => {\n            const endListener = (e) => {\n                this.stopAllStreams();\n                this.connected = false;\n                this.connecting = false;\n                if (e)\n                    reject(e);\n            };\n            this.connector.once('error', endListener);\n            this.connector.once('timeout', endListener);\n            this.connector.once('close', () => {\n                this.emit('close');\n                endListener();\n            });\n            this.connector.once('connected', () => {\n                this.login()\n                    .then(() => {\n                    this.connecting = false;\n                    this.connected = true;\n                    this.connector.removeListener('error', endListener);\n                    this.connector.removeListener('timeout', endListener);\n                    const connectedErrorListener = (e) => {\n                        this.connected = false;\n                        this.connecting = false;\n                        this.emit('error', e);\n                    };\n                    this.connector.once('error', connectedErrorListener);\n                    this.connector.once('timeout', connectedErrorListener);\n                    if (this.keepalive)\n                        this.keepaliveBy('#');\n                    info('Logged in on %s', this.host);\n                    resolve(this);\n                })\n                    .catch((e) => {\n                    this.connecting = false;\n                    this.connected = false;\n                    reject(e);\n                });\n            });\n            this.connector.connect();\n        });\n    }\n    /**\n     * Writes a command over the socket to the routerboard\n     * on a new channel\n     *\n     * @param {string|Array} params\n     * @param {Array<string|string[]>} moreParams\n     * @returns {Promise}\n     */\n    write(params, ...moreParams) {\n        params = this.concatParams(params, moreParams);\n        let chann = this.openChannel();\n        this.holdConnection();\n        chann.once('close', () => {\n            chann = null; // putting garbage collector to work :]\n            this.decreaseChannelsOpen();\n            this.releaseConnectionHold();\n        });\n        return chann.write(params);\n    }\n    /**\n     * Writes a command over the socket to the routerboard\n     * on a new channel and return an event of what happens\n     * with the responses. Listen for 'data', 'done', 'trap' and 'close'\n     * events.\n     *\n     * @param {string|Array} params\n     * @param {Array<string|string[]>} moreParams\n     * @returns {RStream}\n     */\n    writeStream(params, ...moreParams) {\n        params = this.concatParams(params, moreParams);\n        const stream = new RStream_1.RStream(this.openChannel(), params);\n        stream.on('started', () => {\n            this.holdConnection();\n        });\n        stream.on('stopped', () => {\n            this.unregisterStream(stream);\n            this.decreaseChannelsOpen();\n            this.releaseConnectionHold();\n        });\n        stream.start();\n        this.registerStream(stream);\n        return stream;\n    }\n    /**\n     * Returns a stream object for handling continuous data\n     * flow.\n     *\n     * @param {string|Array} params\n     * @param {function} callback\n     * @returns {RStream}\n     */\n    stream(params = [], ...moreParams) {\n        let callback = moreParams.pop();\n        if (typeof callback !== 'function') {\n            if (callback)\n                moreParams.push(callback);\n            callback = null;\n        }\n        params = this.concatParams(params, moreParams);\n        const stream = new RStream_1.RStream(this.openChannel(), params, callback);\n        stream.on('started', () => {\n            this.holdConnection();\n        });\n        stream.on('stopped', () => {\n            this.unregisterStream(stream);\n            this.decreaseChannelsOpen();\n            this.releaseConnectionHold();\n            stream.removeAllListeners();\n        });\n        stream.start();\n        stream.prepareDebounceEmptyData();\n        this.registerStream(stream);\n        return stream;\n    }\n    /**\n     * Keep the connection alive by running a set of\n     * commands provided instead of the random command\n     *\n     * @param {string|Array} params\n     * @param {function} callback\n     */\n    keepaliveBy(params = [], ...moreParams) {\n        this.holdingConnectionWithKeepalive = true;\n        if (this.keptaliveby)\n            timers_1.clearTimeout(this.keptaliveby);\n        let callback = moreParams.pop();\n        if (typeof callback !== 'function') {\n            if (callback)\n                moreParams.push(callback);\n            callback = null;\n        }\n        params = this.concatParams(params, moreParams);\n        const exec = () => {\n            if (!this.closing) {\n                if (this.keptaliveby)\n                    timers_1.clearTimeout(this.keptaliveby);\n                this.keptaliveby = setTimeout(() => {\n                    this.write(params.slice())\n                        .then((data) => {\n                        if (typeof callback === 'function')\n                            callback(null, data);\n                        exec();\n                    })\n                        .catch((err) => {\n                        if (typeof callback === 'function')\n                            callback(err, null);\n                        exec();\n                    });\n                }, (this.timeout * 1000) / 2);\n            }\n        };\n        exec();\n    }\n    /**\n     * Closes the connection.\n     * It can be openned again without recreating\n     * an object from this class.\n     *\n     * @returns {Promise}\n     */\n    close() {\n        if (this.closing) {\n            return Promise.reject(new RosException_1.RosException('ALRDYCLOSNG'));\n        }\n        if (!this.connected) {\n            return Promise.resolve(this);\n        }\n        if (this.connectionHoldInterval) {\n            timers_1.clearTimeout(this.connectionHoldInterval);\n        }\n        timers_1.clearTimeout(this.keptaliveby);\n        this.stopAllStreams();\n        return new Promise((resolve) => {\n            this.closing = true;\n            this.connector.once('close', () => {\n                this.connector.destroy();\n                this.connector = null;\n                this.closing = false;\n                this.connected = false;\n                resolve(this);\n            });\n            this.connector.close();\n        });\n    }\n    /**\n     * Opens a new channel either for just writing or streaming\n     *\n     * @returns {Channel}\n     */\n    openChannel() {\n        this.increaseChannelsOpen();\n        return new Channel_1.Channel(this.connector);\n    }\n    increaseChannelsOpen() {\n        this.channelsOpen++;\n    }\n    decreaseChannelsOpen() {\n        this.channelsOpen--;\n    }\n    registerStream(stream) {\n        this.registeredStreams.push(stream);\n    }\n    unregisterStream(stream) {\n        this.registeredStreams = this.registeredStreams.filter((registeredStreams) => registeredStreams !== stream);\n    }\n    stopAllStreams() {\n        for (const registeredStream of this.registeredStreams) {\n            registeredStream.stop();\n        }\n    }\n    /**\n     * Holds the connection if keepalive wasn't set\n     * so when a channel opens, ensure that we\n     * receive a response before a timeout\n     */\n    holdConnection() {\n        // If it's not the first connection to open\n        // don't try to hold it again\n        if (this.channelsOpen !== 1)\n            return;\n        if (this.connected && !this.holdingConnectionWithKeepalive) {\n            if (this.connectionHoldInterval)\n                timers_1.clearTimeout(this.connectionHoldInterval);\n            const holdConnInterval = () => {\n                this.connectionHoldInterval = setTimeout(() => {\n                    let chann = new Channel_1.Channel(this.connector);\n                    chann.on('close', () => {\n                        chann = null;\n                    });\n                    chann\n                        .write(['#'])\n                        .then(() => {\n                        holdConnInterval();\n                    })\n                        .catch(() => {\n                        holdConnInterval();\n                    });\n                }, (this.timeout * 1000) / 2);\n            };\n            holdConnInterval();\n        }\n    }\n    /**\n     * Release the connection that was held\n     * when waiting for responses from channels open\n     */\n    releaseConnectionHold() {\n        // If there are channels still open\n        // don't release the hold\n        if (this.channelsOpen > 0)\n            return;\n        if (this.connectionHoldInterval)\n            timers_1.clearTimeout(this.connectionHoldInterval);\n    }\n    /**\n     * Login on the routerboard to provide\n     * api functionalities, using the credentials\n     * provided.\n     *\n     * @returns {Promise}\n     */\n    login() {\n        this.connecting = true;\n        info('Sending 6.43+ login to %s', this.host);\n        return this.write('/login', [\n            `=name=${this.user}`,\n            `=password=${this.password}`,\n        ])\n            .then((data) => {\n            if (data.length === 0) {\n                info('6.43+ Credentials accepted on %s, we are connected', this.host);\n                return Promise.resolve(this);\n            }\n            else if (data.length === 1) {\n                info('Received challenge on %s, will send credentials. Data: %o', this.host, data);\n                const challenge = Buffer.alloc(this.password.length + 17);\n                const challengeOffset = this.password.length + 1;\n                // Here we have 32 chars with hex encoded 16 bytes of challenge data\n                const ret = data[0].ret;\n                challenge.write(String.fromCharCode(0) + this.password);\n                // To write 32 hec chars to buffer as bytes we need to write 16 bytes\n                challenge.write(ret, challengeOffset, ret.length / 2, 'hex');\n                const resp = '00' +\n                    crypto\n                        .createHash('MD5')\n                        .update(challenge)\n                        .digest('hex');\n                return this.write('/login', [\n                    '=name=' + this.user,\n                    '=response=' + resp,\n                ])\n                    .then(() => {\n                    info('Credentials accepted on %s, we are connected', this.host);\n                    return Promise.resolve(this);\n                })\n                    .catch((err) => {\n                    if (err.message === 'cannot log in' ||\n                        err.message ===\n                            'invalid user name or password (6)') {\n                        err = new RosException_1.RosException('CANTLOGIN');\n                    }\n                    this.connector.destroy();\n                    error(\"Couldn't loggin onto %s, Error: %O\", this.host, err);\n                    return Promise.reject(err);\n                });\n            }\n            error('Unknown return from /login command on %s, data returned: %O', this.host, data);\n            Promise.reject(new RosException_1.RosException('CANTLOGIN'));\n        })\n            .catch((err) => {\n            if (err.message === 'cannot log in' ||\n                err.message === 'invalid user name or password (6)') {\n                err = new RosException_1.RosException('CANTLOGIN');\n            }\n            this.connector.destroy();\n            error(\"Couldn't loggin onto %s, Error: %O\", this.host, err);\n            return Promise.reject(err);\n        });\n    }\n    concatParams(firstParameter, parameters) {\n        if (typeof firstParameter === 'string')\n            firstParameter = [firstParameter];\n        for (let parameter of parameters) {\n            if (typeof parameter === 'string')\n                parameter = [parameter];\n            if (parameter.length > 0)\n                firstParameter = firstParameter.concat(parameter);\n        }\n        return firstParameter;\n    }\n}\nexports.RouterOSAPI = RouterOSAPI;\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-routeros/dist/RouterOSAPI.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-routeros/dist/connector/Connector.js":
/*!****************************************************************!*\
  !*** ./node_modules/node-routeros/dist/connector/Connector.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst net_1 = __webpack_require__(/*! net */ \"net\");\nconst tls = __webpack_require__(/*! tls */ \"tls\");\nconst Receiver_1 = __webpack_require__(/*! ./Receiver */ \"(rsc)/./node_modules/node-routeros/dist/connector/Receiver.js\");\nconst Transmitter_1 = __webpack_require__(/*! ./Transmitter */ \"(rsc)/./node_modules/node-routeros/dist/connector/Transmitter.js\");\nconst RosException_1 = __webpack_require__(/*! ../RosException */ \"(rsc)/./node_modules/node-routeros/dist/RosException.js\");\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\");\nconst info = debug('routeros-api:connector:connector:info');\nconst error = debug('routeros-api:connector:connector:error');\n/**\n * Connector class responsible for communicating with\n * the routeros via api, sending and receiving buffers.\n *\n * The main focus of this class is to be able to\n * construct and destruct dinamically by the RouterOSAPI class\n * when needed, so the authentication parameters don't\n * need to be changed every time we need to reconnect.\n */\nclass Connector extends events_1.EventEmitter {\n    /**\n     * Constructor which receive the options of the connection\n     *\n     * @param {Object} options\n     */\n    constructor(options) {\n        super();\n        /**\n         * Connected status\n         */\n        this.connected = false;\n        /**\n         * Connecting status\n         */\n        this.connecting = false;\n        /**\n         * Closing status\n         */\n        this.closing = false;\n        this.host = options.host;\n        if (options.timeout)\n            this.timeout = options.timeout;\n        if (options.port)\n            this.port = options.port;\n        if (typeof options.tls === 'boolean' && options.tls)\n            options.tls = {};\n        if (typeof options.tls === 'object') {\n            if (!options.port)\n                this.port = 8729;\n            this.tls = options.tls;\n        }\n    }\n    /**\n     * Connect to the routerboard\n     *\n     * @returns {Connector}\n     */\n    connect() {\n        if (!this.connected) {\n            if (!this.connecting) {\n                this.connecting = true;\n                if (this.tls) {\n                    this.socket = tls.connect(this.port, this.host, this.tls, this.onConnect.bind(this));\n                    this.transmitter = new Transmitter_1.Transmitter(this.socket);\n                    this.receiver = new Receiver_1.Receiver(this.socket);\n                    this.socket.on('data', this.onData.bind(this));\n                    this.socket.on('tlsClientError', this.onError.bind(this));\n                    this.socket.once('end', this.onEnd.bind(this));\n                    this.socket.once('timeout', this.onTimeout.bind(this));\n                    this.socket.once('fatal', this.onEnd.bind(this));\n                    this.socket.on('error', this.onError.bind(this));\n                    this.socket.setTimeout(this.timeout * 1000);\n                    this.socket.setKeepAlive(true);\n                }\n                else {\n                    this.socket = new net_1.Socket();\n                    this.transmitter = new Transmitter_1.Transmitter(this.socket);\n                    this.receiver = new Receiver_1.Receiver(this.socket);\n                    this.socket.once('connect', this.onConnect.bind(this));\n                    this.socket.once('end', this.onEnd.bind(this));\n                    this.socket.once('timeout', this.onTimeout.bind(this));\n                    this.socket.once('fatal', this.onEnd.bind(this));\n                    this.socket.on('error', this.onError.bind(this));\n                    this.socket.on('data', this.onData.bind(this));\n                    this.socket.setTimeout(this.timeout * 1000);\n                    this.socket.setKeepAlive(true);\n                    this.socket.connect(this.port, this.host);\n                }\n            }\n        }\n        return this;\n    }\n    /**\n     * Writes data through the open socket\n     *\n     * @param {Array} data\n     * @returns {Connector}\n     */\n    write(data) {\n        for (const line of data) {\n            this.transmitter.write(line);\n        }\n        this.transmitter.write(null);\n        return this;\n    }\n    /**\n     * Register a tag to receive data\n     *\n     * @param {string} tag\n     * @param {function} callback\n     */\n    read(tag, callback) {\n        this.receiver.read(tag, callback);\n    }\n    /**\n     * Unregister a tag, so it no longer waits for data\n     * @param {string} tag\n     */\n    stopRead(tag) {\n        this.receiver.stop(tag);\n    }\n    /**\n     * Start closing the connection\n     */\n    close() {\n        if (!this.closing) {\n            this.closing = true;\n            this.socket.end();\n        }\n    }\n    /**\n     * Destroy the socket, no more data\n     * can be exchanged from now on and\n     * this class itself must be recreated\n     */\n    destroy() {\n        this.socket.destroy();\n        this.removeAllListeners();\n    }\n    /**\n     * Socket connection event listener.\n     * After the connection is stablished,\n     * ask the transmitter to run any\n     * command stored over the pool\n     *\n     * @returns {function}\n     */\n    onConnect() {\n        this.connecting = false;\n        this.connected = true;\n        info('Connected on %s', this.host);\n        this.transmitter.runPool();\n        this.emit('connected', this);\n    }\n    /**\n     * Socket end event listener.\n     * Terminates the connection after\n     * the socket is released\n     *\n     * @returns {function}\n     */\n    onEnd() {\n        this.emit('close', this);\n        this.destroy();\n    }\n    /**\n     * Socket error event listener.\n     * Emmits the error while trying to connect and\n     * destroys the socket.\n     *\n     * @returns {function}\n     */\n    onError(err) {\n        err = new RosException_1.RosException(err.errno, err);\n        error('Problem while trying to connect to %s. Error: %s', this.host, err.message);\n        this.emit('error', err, this);\n        this.destroy();\n    }\n    /**\n     * Socket timeout event listener\n     * Emmits timeout error and destroys the socket\n     *\n     * @returns {function}\n     */\n    onTimeout() {\n        this.emit('timeout', new RosException_1.RosException('SOCKTMOUT', { seconds: this.timeout }), this);\n        this.destroy();\n    }\n    /**\n     * Socket data event listener\n     * Receives the data and sends it to processing\n     *\n     * @returns {function}\n     */\n    onData(data) {\n        info('Got data from the socket, will process it');\n        this.receiver.processRawData(data);\n    }\n}\nexports.Connector = Connector;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29ubmVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Nvbm5lY3Rvci9Db25uZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxtQ0FBc0M7QUFDdEMsNkJBQTZCO0FBQzdCLDJCQUEyQjtBQUMzQix5Q0FBc0M7QUFDdEMsK0NBQTRDO0FBQzVDLGtEQUErQztBQUMvQywrQkFBK0I7QUFFL0IsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7QUFDNUQsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7QUFFOUQ7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFhLFNBQVUsU0FBUSxxQkFBWTtJQW1EdkM7Ozs7T0FJRztJQUNILFlBQVksT0FBWTtRQUNwQixLQUFLLEVBQUUsQ0FBQztRQTFCWjs7V0FFRztRQUNLLGNBQVMsR0FBWSxLQUFLLENBQUM7UUFFbkM7O1dBRUc7UUFDSyxlQUFVLEdBQVksS0FBSyxDQUFDO1FBRXBDOztXQUVHO1FBQ0ssWUFBTyxHQUFZLEtBQUssQ0FBQztRQWU3QixJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDekIsSUFBSSxPQUFPLENBQUMsT0FBTztZQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUNwRCxJQUFJLE9BQU8sQ0FBQyxJQUFJO1lBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQzNDLElBQUksT0FBTyxPQUFPLENBQUMsR0FBRyxLQUFLLFNBQVMsSUFBSSxPQUFPLENBQUMsR0FBRztZQUFFLE9BQU8sQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ3RFLElBQUksT0FBTyxPQUFPLENBQUMsR0FBRyxLQUFLLFFBQVEsRUFBRTtZQUNqQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUk7Z0JBQUUsSUFBSSxDQUFDLElBQUksR0FB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# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-routeros/dist/connector/Connector.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-routeros/dist/connector/Receiver.js":
/*!***************************************************************!*\
  !*** ./node_modules/node-routeros/dist/connector/Receiver.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst iconv = __webpack_require__(/*! iconv-lite */ \"(rsc)/./node_modules/iconv-lite/lib/index.js\");\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\");\nconst RosException_1 = __webpack_require__(/*! ../RosException */ \"(rsc)/./node_modules/node-routeros/dist/RosException.js\");\nconst info = debug('routeros-api:connector:receiver:info');\nconst error = debug('routeros-api:connector:receiver:error');\nconst nullBuffer = Buffer.from([0x00]);\n/**\n * Class responsible for receiving and parsing the socket\n * data, sending to the readers and listeners\n */\nclass Receiver {\n    /**\n     * Receives the socket so we are able to read\n     * the data sent to it, separating each tag\n     * to the according listener.\n     *\n     * @param socket\n     */\n    constructor(socket) {\n        /**\n         * The registered tags to answer data to\n         */\n        this.tags = new Map();\n        /**\n         * The length of the current data chain received from\n         * the socket\n         */\n        this.dataLength = 0;\n        /**\n         * A pipe of all responses received from the routerboard\n         */\n        this.sentencePipe = [];\n        /**\n         * Flag if the sentencePipe is being processed to\n         * prevent concurrent sentences breaking the pipe\n         */\n        this.processingSentencePipe = false;\n        /**\n         * The current line being processed from the data chain\n         */\n        this.currentLine = '';\n        /**\n         * The current reply received for the tag\n         */\n        this.currentReply = '';\n        /**\n         * The current tag which the routerboard responded\n         */\n        this.currentTag = '';\n        /**\n         * The current data chain or packet\n         */\n        this.currentPacket = [];\n        this.socket = socket;\n    }\n    /**\n     * Register the tag as a reader so when\n     * the routerboard respond to the command\n     * related to the tag, we know where to send\n     * the data to\n     *\n     * @param {string} tag\n     * @param {function} callback\n     */\n    read(tag, callback) {\n        info('Reader of %s tag is being set', tag);\n        this.tags.set(tag, {\n            name: tag,\n            callback: callback,\n        });\n    }\n    /**\n     * Stop reading from a tag, removing it\n     * from the tag mapping. Usually it is closed\n     * after the command has being !done, since each command\n     * opens a new auto-generated tag\n     *\n     * @param {string} tag\n     */\n    stop(tag) {\n        info('Not reading from %s tag anymore', tag);\n        this.tags.delete(tag);\n    }\n    /**\n     * Proccess the raw buffer data received from the routerboard,\n     * decode using win1252 encoded string from the routerboard to\n     * utf-8, so languages with accentuation works out of the box.\n     *\n     * After reading each sentence from the raw packet, sends it\n     * to be parsed\n     *\n     * @param {Buffer} data\n     */\n    processRawData(data) {\n        if (this.lengthDescriptorSegment) {\n            data = Buffer.concat([this.lengthDescriptorSegment, data]);\n            this.lengthDescriptorSegment = null;\n        }\n        // Loop through the data we just received\n        while (data.length > 0) {\n            // If this does not contain the beginning of a packet...\n            if (this.dataLength > 0) {\n                // If the length of the data we have in our buffer\n                // is less than or equal to that reported by the\n                // bytes used to dermine length...\n                if (data.length <= this.dataLength) {\n                    // Subtract the data we are taking from the length we desire\n                    this.dataLength -= data.length;\n                    // Add this data to our current line\n                    this.currentLine += iconv.decode(data, 'win1252');\n                    // If there is no more desired data we want...\n                    if (this.dataLength === 0) {\n                        // Push the data to the sentance\n                        this.sentencePipe.push({\n                            sentence: this.currentLine,\n                            hadMore: data.length !== this.dataLength,\n                        });\n                        // process the sentance and clear the line\n                        this.processSentence();\n                        this.currentLine = '';\n                    }\n                    // Break out of processRawData and wait for the next\n                    // set of data from the socket\n                    break;\n                    // If we have more data than we desire...\n                }\n                else {\n                    // slice off the part that we desire\n                    const tmpBuffer = data.slice(0, this.dataLength);\n                    // decode this segment\n                    const tmpStr = iconv.decode(tmpBuffer, 'win1252');\n                    // Add this to our current line\n                    this.currentLine += tmpStr;\n                    // save our line...\n                    const line = this.currentLine;\n                    // clear the current line\n                    this.currentLine = '';\n                    // cut off the line we just pulled out\n                    data = data.slice(this.dataLength);\n                    // determine the length of the next word. This method also\n                    // returns the number of bytes it took to describe the length\n                    const [descriptor_length, length] = this.decodeLength(data);\n                    // If we do not have enough data to determine\n                    // the length... we wait for the next loop\n                    // and store the length descriptor segment\n                    if (descriptor_length > data.length) {\n                        this.lengthDescriptorSegment = data;\n                    }\n                    // Save this as our next desired length\n                    this.dataLength = length;\n                    // slice off the bytes used to describe the length\n                    data = data.slice(descriptor_length);\n                    // If we only desire one more and its the end of the sentance...\n                    if (this.dataLength === 1 && data.equals(nullBuffer)) {\n                        this.dataLength = 0;\n                        data = data.slice(1); // get rid of excess buffer\n                    }\n                    this.sentencePipe.push({\n                        sentence: line,\n                        hadMore: data.length > 0,\n                    });\n                    this.processSentence();\n                }\n                // This is the beginning of this packet...\n                // This ALWAYS gets run first\n            }\n            else {\n                // returns back the start index of the data and the length\n                const [descriptor_length, length] = this.decodeLength(data);\n                // store how long our data is\n                this.dataLength = length;\n                // slice off the bytes used to describe the length\n                data = data.slice(descriptor_length);\n                if (this.dataLength === 1 && data.equals(nullBuffer)) {\n                    this.dataLength = 0;\n                    data = data.slice(1); // get rid of excess buffer\n                }\n            }\n        }\n    }\n    /**\n     * Process each sentence from the data packet received.\n     *\n     * Detects the .tag of the packet, sending the data to the\n     * related tag when another reply is detected or if\n     * the packet had no more lines to be processed.\n     *\n     */\n    processSentence() {\n        if (!this.processingSentencePipe) {\n            info('Got asked to process sentence pipe');\n            this.processingSentencePipe = true;\n            const process = () => {\n                if (this.sentencePipe.length > 0) {\n                    const line = this.sentencePipe.shift();\n                    if (!line.hadMore && this.currentReply === '!fatal') {\n                        this.socket.emit('fatal');\n                        return;\n                    }\n                    info('Processing line %s', line.sentence);\n                    if (/^\\.tag=/.test(line.sentence)) {\n                        this.currentTag = line.sentence.substring(5);\n                    }\n                    else if (/^!/.test(line.sentence)) {\n                        if (this.currentTag) {\n                            info('Received another response, sending current data to tag %s', this.currentTag);\n                            this.sendTagData(this.currentTag);\n                        }\n                        this.currentPacket.push(line.sentence);\n                        this.currentReply = line.sentence;\n                    }\n                    else {\n                        this.currentPacket.push(line.sentence);\n                    }\n                    if (this.sentencePipe.length === 0 &&\n                        this.dataLength === 0) {\n                        if (!line.hadMore && this.currentTag) {\n                            info('No more sentences to process, will send data to tag %s', this.currentTag);\n                            this.sendTagData(this.currentTag);\n                        }\n                        else {\n                            info('No more sentences and no data to send');\n                        }\n                        this.processingSentencePipe = false;\n                    }\n                    else {\n                        process();\n                    }\n                }\n                else {\n                    this.processingSentencePipe = false;\n                }\n            };\n            process();\n        }\n    }\n    /**\n     * Send the data collected from the tag to the\n     * tag reader\n     */\n    sendTagData(currentTag) {\n        const tag = this.tags.get(currentTag);\n        if (tag) {\n            info('Sending to tag %s the packet %O', tag.name, this.currentPacket);\n            tag.callback(this.currentPacket);\n        }\n        else {\n            throw new RosException_1.RosException('UNREGISTEREDTAG');\n        }\n        this.cleanUp();\n    }\n    /**\n     * Clean the current packet, tag and reply state\n     * to start over\n     */\n    cleanUp() {\n        this.currentPacket = [];\n        this.currentTag = null;\n        this.currentReply = null;\n    }\n    /**\n     * Decodes the length of the buffer received\n     *\n     * Credits for George Joseph: https://github.com/gtjoseph\n     * and for Brandon Myers: https://github.com/Trakkasure\n     *\n     * @param {Buffer} data\n     */\n    decodeLength(data) {\n        let len;\n        let idx = 0;\n        const b = data[idx++];\n        if (b & 128) {\n            if ((b & 192) === 128) {\n                len = ((b & 63) << 8) + data[idx++];\n            }\n            else {\n                if ((b & 224) === 192) {\n                    len = ((b & 31) << 8) + data[idx++];\n                    len = (len << 8) + data[idx++];\n                }\n                else {\n                    if ((b & 240) === 224) {\n                        len = ((b & 15) << 8) + data[idx++];\n                        len = (len << 8) + data[idx++];\n                        len = (len << 8) + data[idx++];\n                    }\n                    else {\n                        len = data[idx++];\n                        len = (len << 8) + data[idx++];\n                        len = (len << 8) + data[idx++];\n                        len = (len << 8) + data[idx++];\n                    }\n                }\n            }\n        }\n        else {\n            len = b;\n        }\n        return [idx, len];\n    }\n}\nexports.Receiver = Receiver;\n//# sourceMappingURL=data:application/json;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-routeros/dist/connector/Receiver.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-routeros/dist/connector/Transmitter.js":
/*!******************************************************************!*\
  !*** ./node_modules/node-routeros/dist/connector/Transmitter.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst iconv = __webpack_require__(/*! iconv-lite */ \"(rsc)/./node_modules/iconv-lite/lib/index.js\");\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\");\nconst info = debug('routeros-api:connector:transmitter:info');\nconst error = debug('routeros-api:connector:transmitter:error');\n/**\n * Class responsible for transmitting data over the\n * socket to the routerboard\n */\nclass Transmitter {\n    /**\n     * Constructor\n     *\n     * @param socket\n     */\n    constructor(socket) {\n        /**\n         * Pool of data to be sent after the socket connects\n         */\n        this.pool = [];\n        this.socket = socket;\n    }\n    /**\n     * Write data over the socket, if it not writable yet,\n     * save over the pool to be ran after\n     *\n     * @param {string} data\n     */\n    write(data) {\n        const encodedData = this.encodeString(data);\n        if (!this.socket.writable || this.pool.length > 0) {\n            info('Socket not writable, saving %o in the pool', data);\n            this.pool.push(encodedData);\n        }\n        else {\n            info('Writing command %s over the socket', data);\n            this.socket.write(encodedData);\n        }\n    }\n    /**\n     * Writes all data stored in the pool\n     */\n    runPool() {\n        info('Running stacked command pool');\n        let data;\n        while (this.pool.length > 0) {\n            data = this.pool.shift();\n            this.socket.write(data);\n        }\n    }\n    /**\n     * Encode the string data that will\n     * be sent over to the routerboard.\n     *\n     * It's encoded in win1252 so any accentuation on foreign languages\n     * are displayed correctly when opened with winbox.\n     *\n     * Credits for George Joseph: https://github.com/gtjoseph\n     * and for Brandon Myers: https://github.com/Trakkasure\n     *\n     * @param {string} str\n     */\n    encodeString(str) {\n        if (str === null)\n            return String.fromCharCode(0);\n        const encoded = iconv.encode(str, 'win1252');\n        let data;\n        let len = encoded.length;\n        let offset = 0;\n        if (len < 0x80) {\n            data = Buffer.alloc(len + 1);\n            data[offset++] = len;\n        }\n        else if (len < 0x4000) {\n            data = Buffer.alloc(len + 2);\n            len |= 0x8000;\n            data[offset++] = (len >> 8) & 0xff;\n            data[offset++] = len & 0xff;\n        }\n        else if (len < 0x200000) {\n            data = Buffer.alloc(len + 3);\n            len |= 0xc00000;\n            data[offset++] = (len >> 16) & 0xff;\n            data[offset++] = (len >> 8) & 0xff;\n            data[offset++] = len & 0xff;\n        }\n        else if (len < 0x10000000) {\n            data = Buffer.alloc(len + 4);\n            len |= 0xe0000000;\n            data[offset++] = (len >> 24) & 0xff;\n            data[offset++] = (len >> 16) & 0xff;\n            data[offset++] = (len >> 8) & 0xff;\n            data[offset++] = len & 0xff;\n        }\n        else {\n            data = Buffer.alloc(len + 5);\n            data[offset++] = 0xf0;\n            data[offset++] = (len >> 24) & 0xff;\n            data[offset++] = (len >> 16) & 0xff;\n            data[offset++] = (len >> 8) & 0xff;\n            data[offset++] = len & 0xff;\n        }\n        data.fill(encoded, offset);\n        return data;\n    }\n}\nexports.Transmitter = Transmitter;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJhbnNtaXR0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29ubmVjdG9yL1RyYW5zbWl0dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esb0NBQW9DO0FBQ3BDLCtCQUErQjtBQUUvQixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMseUNBQXlDLENBQUMsQ0FBQztBQUM5RCxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztBQUVoRTs7O0dBR0c7QUFDSCxNQUFhLFdBQVc7SUFXcEI7Ozs7T0FJRztJQUNILFlBQVksTUFBYztRQVYxQjs7V0FFRztRQUNLLFNBQUksR0FBYSxFQUFFLENBQUM7UUFReEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDekIsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksS0FBSyxDQUFDLElBQVk7UUFDckIsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQy9DLElBQUksQ0FBQyw0Q0FBNEMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN6RCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUMvQjthQUFNO1lBQ0gsSUFBSSxDQUFDLG9DQUFvQyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ2pELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ2xDO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0ksT0FBTztRQUNWLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQ3JDLElBQUksSUFBSSxDQUFDO1FBQ1QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVB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//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-routeros/dist/connector/Transmitter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-routeros/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/node-routeros/dist/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nif (process.env.ENV === 'testing') {\n    const sourceMapSupport = __webpack_require__(/*! source-map-support */ \"(rsc)/./node_modules/source-map-support/source-map-support.js\");\n    sourceMapSupport.install();\n}\n__export(__webpack_require__(/*! ./RouterOSAPI */ \"(rsc)/./node_modules/node-routeros/dist/RouterOSAPI.js\"));\n__export(__webpack_require__(/*! ./connector/Connector */ \"(rsc)/./node_modules/node-routeros/dist/connector/Connector.js\"));\n__export(__webpack_require__(/*! ./connector/Receiver */ \"(rsc)/./node_modules/node-routeros/dist/connector/Receiver.js\"));\n__export(__webpack_require__(/*! ./connector/Transmitter */ \"(rsc)/./node_modules/node-routeros/dist/connector/Transmitter.js\"));\n__export(__webpack_require__(/*! ./Channel */ \"(rsc)/./node_modules/node-routeros/dist/Channel.js\"));\n__export(__webpack_require__(/*! ./RosException */ \"(rsc)/./node_modules/node-routeros/dist/RosException.js\"));\n__export(__webpack_require__(/*! ./RStream */ \"(rsc)/./node_modules/node-routeros/dist/RStream.js\"));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLFNBQVMsRUFBRTtJQUMvQixNQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3ZELGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDO0NBQzlCO0FBRUQsbUNBQThCO0FBQzlCLDJDQUFzQztBQUN0QywwQ0FBcUM7QUFDckMsNkNBQXdDO0FBQ3hDLCtCQUEwQjtBQUUxQixvQ0FBK0I7QUFDL0IsK0JBQTBCIn0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1yb3V0ZXJvcy9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0EsNkJBQTZCLG1CQUFPLENBQUMseUZBQW9CO0FBQ3pEO0FBQ0E7QUFDQSxTQUFTLG1CQUFPLENBQUMsNkVBQWU7QUFDaEMsU0FBUyxtQkFBTyxDQUFDLDZGQUF1QjtBQUN4QyxTQUFTLG1CQUFPLENBQUMsMkZBQXNCO0FBQ3ZDLFNBQVMsbUJBQU8sQ0FBQyxpR0FBeUI7QUFDMUMsU0FBUyxtQkFBTyxDQUFDLHFFQUFXO0FBQzVCLFNBQVMsbUJBQU8sQ0FBQywrRUFBZ0I7QUFDakMsU0FBUyxtQkFBTyxDQUFDLHFFQUFXO0FBQzVCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Npc3RlbWEtYXNzaW5hdHVyYXMvLi9ub2RlX21vZHVsZXMvbm9kZS1yb3V0ZXJvcy9kaXN0L2luZGV4LmpzPzc0MzYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuaWYgKHByb2Nlc3MuZW52LkVOViA9PT0gJ3Rlc3RpbmcnKSB7XG4gICAgY29uc3Qgc291cmNlTWFwU3VwcG9ydCA9IHJlcXVpcmUoJ3NvdXJjZS1tYXAtc3VwcG9ydCcpO1xuICAgIHNvdXJjZU1hcFN1cHBvcnQuaW5zdGFsbCgpO1xufVxuX19leHBvcnQocmVxdWlyZShcIi4vUm91dGVyT1NBUElcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vY29ubmVjdG9yL0Nvbm5lY3RvclwiKSk7XG5fX2V4cG9ydChyZXF1aXJlKFwiLi9jb25uZWN0b3IvUmVjZWl2ZXJcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vY29ubmVjdG9yL1RyYW5zbWl0dGVyXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL0NoYW5uZWxcIikpO1xuX19leHBvcnQocmVxdWlyZShcIi4vUm9zRXhjZXB0aW9uXCIpKTtcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL1JTdHJlYW1cIikpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOXpjbU12YVc1a1pYZ3VkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN1FVRkJRU3hKUVVGSkxFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4TFFVRkxMRk5CUVZNc1JVRkJSVHRKUVVNdlFpeE5RVUZOTEdkQ1FVRm5RaXhIUVVGSExFOUJRVThzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhEUVVGRE8wbEJRM1pFTEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETzBOQlF6bENPMEZCUlVRc2JVTkJRVGhDTzBGQlF6bENMREpEUVVGelF6dEJRVU4wUXl3d1EwRkJjVU03UVVGRGNrTXNOa05CUVhkRE8wRkJRM2hETEN0Q1FVRXdRanRCUVVVeFFpeHZRMEZCSzBJN1FVRkRMMElzSzBKQlFUQkNJbjA9Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-routeros/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-routeros/dist/messages.js":
/*!*****************************************************!*\
  !*** ./node_modules/node-routeros/dist/messages.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports[\"default\"] = {\n    UNREGISTEREDTAG: \"Received data on unregistered tag. This is an error on this API itself and shouldn't have happened.\",\n    UNKNOWNREPLY: 'Tried to process unknown reply: {{reply}}',\n    CANTLOGIN: 'Username or password is invalid',\n    STREAMCLOSD: 'Streaming is closed',\n    ALRDYSTREAMING: 'Already streaming',\n    CANTWRTWHLSTRMG: 'Cannot write over the same channel that is streaming',\n    ALRDYCLOSNG: 'Connection already closing',\n    ALRDYCONNECTING: 'Already connecting',\n    SOCKTMOUT: 'Timed out after {{seconds}} seconds',\n    REFNOTFND: 'Item not found with the reference provided in {{key}}',\n    E2BIG: 'Argument list too long.',\n    EACCES: 'Permission denied.',\n    EADDRINUSE: 'Address already in use.',\n    EADDRNOTAVAIL: 'Address not available.',\n    EAFNOSUPPORT: 'Address family not supported.',\n    EAGAIN: 'Resource temporarily unavailable.',\n    EALREADY: 'Connection already in progress.',\n    EBADE: 'Invalid exchange.',\n    EBADF: 'Bad file descriptor.',\n    EBADFD: 'File descriptor in bad state.',\n    EBADMSG: 'Bad message.',\n    EBADR: 'Invalid request descriptor.',\n    EBADRQC: 'Invalid request code.',\n    EBADSLT: 'Invalid slot.',\n    EBUSY: 'Device or resource busy.',\n    ECANCELED: 'Operation canceled.',\n    ECHILD: 'No child processes.',\n    ECHRNG: 'Channel number out of range.',\n    ECOMM: 'Communication error on send.',\n    ECONNABORTED: 'Connection aborted.',\n    ECONNREFUSED: 'Connection refused.',\n    ECONNRESET: 'Connection reset.',\n    EDEADLK: 'Resource deadlock avoided.',\n    EDEADLOCK: 'Resource deadlock avoided.',\n    EDESTADDRREQ: 'Destination address required.',\n    EDOM: 'Mathematics argument out of domain of function',\n    EDQUOT: 'Disk quota exceeded.',\n    EEXIST: 'File exists.',\n    EFAULT: 'Bad address.',\n    EFBIG: 'File too large.',\n    EHOSTDOWN: 'Host is down.',\n    EHOSTUNREACH: 'Host is unreachable.',\n    EIDRM: 'Identifier removed.',\n    EILSEQ: 'Invalid or incomplete multibyte or wide character',\n    EINPROGRESS: 'Operation in progress.',\n    EINTR: 'Interrupted function call.',\n    EINVAL: 'Invalid argument.',\n    EIO: 'Input/output error.',\n    EISCONN: 'Socket is connected.',\n    EISDIR: 'Is a directory.',\n    EISNAM: 'Is a named type file.',\n    EKEYEXPIRED: 'Key has expired.',\n    EKEYREJECTED: 'Key was rejected by service.',\n    EKEYREVOKED: 'Key has been revoked.',\n    EL2HLT: 'Level 2 halted.',\n    EL2NSYNC: 'Level 2 not synchronized.',\n    EL3HLT: 'Level 3 halted.',\n    EL3RST: 'Level 3 reset.',\n    ELIBACC: 'Cannot access a needed shared library.',\n    ELIBBAD: 'Accessing a corrupted shared library.',\n    ELIBMAX: 'Attempting to link in too many shared libraries.',\n    ELIBSCN: '.lib section in a.out corrupted',\n    ELIBEXEC: 'Cannot exec a shared library directly.',\n    ELOOP: 'Too many levels of symbolic links.',\n    EMEDIUMTYPE: 'Wrong medium type.',\n    EMFILE: 'Too many open files.',\n    EMLINK: 'Too many links.',\n    EMSGSIZE: 'Message too long.',\n    EMULTIHOP: 'Multihop attempted.',\n    ENAMETOOLONG: 'Filename too long.',\n    ENETDOWN: 'Network is down.',\n    ENETRESET: 'Connection aborted by network.',\n    ENETUNREACH: 'Network unreachable.',\n    ENFILE: 'Too many open files in system.',\n    ENOBUFS: 'No buffer space available',\n    ENODATA: 'No message is available on the STREAM head read queue.',\n    ENODEV: 'No such device.',\n    ENOENT: 'No such file or directory.',\n    ENOEXEC: 'Exec format error.',\n    ENOKEY: 'Required key not available.',\n    ENOLCK: 'No locks available.',\n    ENOLINK: 'Link has been severed.',\n    ENOMEDIUM: 'No medium found.',\n    ENOMEM: 'Not enough space.',\n    ENOMSG: 'No message of the desired type.',\n    ENONET: 'Machine is not on the network.',\n    ENOPKG: 'Package not installed.',\n    ENOPROTOOPT: 'Protocol not available.',\n    ENOSPC: 'No space left on device.',\n    ENOSR: 'No STREAM resources.',\n    ENOSTR: 'Not a STREAM.',\n    ENOSYS: 'Function not implemented.',\n    ENOTBLK: 'Block device required.',\n    ENOTCONN: 'The socket is not connected.',\n    ENOTDIR: 'Not a directory.',\n    ENOTEMPTY: 'Directory not empty.',\n    ENOTSOCK: 'Not a socket.',\n    ENOTSUP: 'Operation not supported.',\n    ENOTTY: 'Inappropriate I/O control operation.',\n    ENOTUNIQ: 'Name not unique on network.',\n    ENXIO: 'No such device or address.',\n    EOPNOTSUPP: 'Operation not supported on socket.',\n    EOVERFLOW: 'Value too large to be stored in data type.',\n    EPERM: 'Operation not permitted.',\n    EPFNOSUPPORT: 'Protocol family not supported.',\n    EPIPE: 'Broken pipe.',\n    EPROTO: 'Protocol error.',\n    EPROTONOSUPPORT: 'Protocol not supported.',\n    EPROTOTYPE: 'Protocol wrong type for socket.',\n    ERANGE: 'Result too large.',\n    EREMCHG: 'Remote address changed.',\n    EREMOTE: 'Object is remote.',\n    EREMOTEIO: 'Remote I/O error.',\n    ERESTART: 'Interrupted system call should be restarted.',\n    EROFS: 'Read-only filesystem.',\n    ESHUTDOWN: 'Cannot send after transport endpoint shutdown.',\n    ESPIPE: 'Invalid seek.',\n    ESOCKTNOSUPPORT: 'Socket type not supported.',\n    ESRCH: 'No such process.',\n    ESTALE: 'Stale file handle.',\n    ESTRPIPE: 'Streams pipe error.',\n    ETIME: 'Timer expired.',\n    ETIMEDOUT: 'Connection timed out.',\n    ETXTBSY: 'Text file busy.',\n    EUCLEAN: 'Structure needs cleaning.',\n    EUNATCH: 'Protocol driver not attached.',\n    EUSERS: 'Too many users.',\n    EWOULDBLOCK: 'Resource temporarily unavailable.',\n    EXDEV: 'Improper link.',\n    EXFULL: 'Exchange full.',\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbWVzc2FnZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrQkFBZTtJQUNYLGVBQWUsRUFDWCxxR0FBcUc7SUFDekcsWUFBWSxFQUFFLDJDQUEyQztJQUN6RCxTQUFTLEVBQUUsaUNBQWlDO0lBQzVDLFdBQVcsRUFBRSxxQkFBcUI7SUFDbEMsY0FBYyxFQUFFLG1CQUFtQjtJQUNuQyxlQUFlLEVBQUUsc0RBQXNEO0lBQ3ZFLFdBQVcsRUFBRSw0QkFBNEI7SUFDekMsZUFBZSxFQUFFLG9CQUFvQjtJQUNyQyxTQUFTLEVBQUUscUNBQXFDO0lBQ2hELFNBQVMsRUFBRSx1REFBdUQ7SUFDbEUsS0FBSyxFQUFFLHlCQUF5QjtJQUNoQyxNQUFNLEVBQUUsb0JBQW9CO0lBQzVCLFVBQVUsRUFBRSx5QkFBeUI7SUFDckMsYUFBYSxFQUFFLHdCQUF3QjtJQUN2QyxZQUFZLEVBQUUsK0JBQStCO0lBQzdDLE1BQU0sRUFBRSxtQ0FBbUM7SUFDM0MsUUFBUSxFQUFFLGlDQUFpQztJQUMzQyxLQUFLLEVBQUUsbUJBQW1CO0lBQzFCLEtBQUssRUFBRSxzQkFBc0I7SUFDN0IsTUFBTSxFQUFFLCtCQUErQjtJQUN2QyxPQUFPLEVBQUUsY0FBYztJQUN2QixLQUFLLEVBQUUsNkJBQTZCO0lBQ3BDLE9BQU8sRUFBRSx1QkFBdUI7SUFDaEMsT0FBTyxFQUFFLGVBQWU7SUFDeEIsS0FBSyxFQUFFLDBCQUEwQjtJQUNqQyxTQUFTLEVBQUUscUJBQXFCO0lBQ2hDLE1BQU0sRUFBRSxxQkFBcUI7SUFDN0IsTUFBTSxFQUFFLDhCQUE4QjtJQUN0QyxLQUFLLEVBQUUsOEJBQThCO0lBQ3JDLFlBQVksRUFBRSxxQkFBcUI7SUFDbkMsWUFBWSxFQUFFLHFCQUFxQjtJQUNuQyxVQUFVLEVBQUUsbUJBQW1CO0lBQy9CLE9BQU8sRUFBRSw0QkFBNEI7SUFDckMsU0FBUyxFQUFFLDRCQUE0QjtJQUN2QyxZQUFZLEVBQUUsK0JBQStCO0lBQzdDLElBQUksRUFBRSxnREFBZ0Q7SUFDdEQsTUFBTSxFQUFFLHNCQUFzQjtJQUM5QixNQUFNLEVBQUUsY0FBYztJQUN0QixNQUFNLEVBQUUsY0FBYztJQUN0QixLQUFLLEVBQUUsaUJBQWlCO0lBQ3hCLFNBQVMsRUFBRSxlQUFlO0lBQzFCLFlBQVksRUFBRSxzQkFBc0I7SUFDcEMsS0FBSyxFQUFFLHFCQUFxQjtJQUM1QixNQUFNLEVBQUUsbURBQW1EO0lBQzNELFdBQVcsRUFBRSx3QkFBd0I7SUFDckMsS0FBSyxFQUFFLDRCQUE0QjtJQUNuQyxNQUFNLEVBQUUsbUJBQW1CO0lBQzNCLEdBQUcsRUFBRSxxQkFBcUI7SUFDMUIsT0FBTyxFQUFFLHNCQUFzQjtJQUMvQixNQUFNLEVBQUUsaUJBQWlCO0lBQ3pCLE1BQU0sRUFBRSx1QkFBdUI7SUFDL0IsV0FBVyxFQUFFLGtCQUFrQjtJQUMvQixZQUFZLEVBQUUsOEJBQThCO0lBQzVDLFdBQVcsRUFBRSx1QkFBdUI7SUFDcEMsTUFBTSxFQUFFLGlCQUFpQjtJQUN6QixRQUFRLEVBQUUsMkJBQTJCO0lBQ3JDLE1BQU0sRUFBRSxpQkFBaUI7SUFDekIsTUFBTSxFQUFFLGdCQUFnQjtJQUN4QixPQUFPLEVBQUUsd0NBQXdDO0lBQ2pELE9BQU8sRUFBRSx1Q0FBdUM7SUFDaEQsT0FBTyxFQUFFLGtEQUFrRDtJQUMzRCxPQUFPLEVBQUUsaUNBQWlDO0lBQzFDLFFBQVEsRUFBRSx3Q0FBd0M7SUFDbEQsS0FBSyxFQUFFLG9DQUFvQztJQUMzQyxXQUFXLEVBQUUsb0JBQW9CO0lBQ2pDLE1BQU0sRUFBRSxzQkFBc0I7SUFDOUIsTUFBTSxFQUFFLGlCQUFpQjtJQUN6QixRQUFRLEVBQUUsbUJBQW1CO0lBQzdCLFNBQVMsRUFBRSxxQkFBcUI7SUFDaEMsWUFBWSxFQUFFLG9CQUFvQjtJQUNsQyxRQUFRLEVBQUUsa0JBQWtCO0lBQzVCLFNBQVMsRUFBRSxnQ0FBZ0M7SUFDM0MsV0FBVyxFQUFFLHNCQUFzQjtJQUNuQyxNQUFNLEVBQUUsZ0NBQWdDO0lBQ3hDLE9BQU8sRUFBRSwyQkFBMkI7SUFDcEMsT0FBTyxFQUFFLHdEQUF3RDtJQUNqRSxNQUFNLEVBQUUsaUJBQWlCO0lBQ3pCLE1BQU0sRUFBRSw0QkFBNEI7SUFDcEMsT0FBTyxFQUFFLG9CQUFvQjtJQUM3QixNQUFNLEVBQUUsNkJBQTZCO0lBQ3JDLE1BQU0sRUFBRSxxQkFBcUI7SUFDN0IsT0FBTyxFQUFFLHdCQUF3QjtJQUNqQyxTQUFTLEVBQUUsa0JBQWtCO0lBQzdCLE1BQU0sRUFBRSxtQkFBbUI7SUFDM0IsTUFBTSxFQUFFLGlDQUFpQztJQUN6QyxNQUFNLEVBQUUsZ0NBQWdDO0lBQ3hDLE1BQU0sRUFBRSx3QkFBd0I7SUFDaEMsV0FBVyxFQUFFLHlCQUF5QjtJQUN0QyxNQUFNLEVBQUUsMEJBQTBCO0lBQ2xDLEtBQUssRUFBRSxzQkFBc0I7SUFDN0IsTUFBTSxFQUFFLGVBQWU7SUFDdkIsTUFBTSxFQUFFLDJCQUEyQjtJQUNuQyxPQUFPLEVBQUUsd0JBQXdCO0lBQ2pDLFFBQVEsRUFBRSw4QkFBOEI7SUFDeEMsT0FBTyxFQUFFLGtCQUFrQjtJQUMzQixTQUFTLEVBQUUsc0JBQXNCO0lBQ2pDLFFBQVEsRUFBRSxlQUFlO0lBQ3pCLE9BQU8sRUFBRSwwQkFBMEI7SUFDbkMsTUFBTSxFQUFFLHNDQUFzQztJQUM5QyxRQUFRLEVBQUUsNkJBQTZCO0lBQ3ZDLEtBQUssRUFBRSw0QkFBNEI7SUFDbkMsVUFBVSxFQUFFLG9DQUFvQztJQUNoRCxTQUFTLEVBQUUsNENBQTRDO0lBQ3ZELEtBQUssRUFBRSwwQkFBMEI7SUFDakMsWUFBWSxFQUFFLGdDQUFnQztJQUM5QyxLQUFLLEVBQUUsY0FBYztJQUNyQixNQUFNLEVBQUUsaUJBQWlCO0lBQ3pCLGVBQWUsRUFBRSx5QkFBeUI7SUFDMUMsVUFBVSxFQUFFLGlDQUFpQztJQUM3QyxNQUFNLEVBQUUsbUJBQW1CO0lBQzNCLE9BQU8sRUFBRSx5QkFBeUI7SUFDbEMsT0FBTyxFQUFFLG1CQUFtQjtJQUM1QixTQUFTLEVBQUUsbUJBQW1CO0lBQzlCLFFBQVEsRUFBRSw4Q0FBOEM7SUFDeEQsS0FBSyxFQUFFLHVCQUF1QjtJQUM5QixTQUFTLEVBQUUsZ0RBQWdEO0lBQzNELE1BQU0sRUFBRSxlQUFlO0lBQ3ZCLGVBQWUsRUFBRSw0QkFBNEI7SUFDN0MsS0FBSyxFQUFFLGtCQUFrQjtJQUN6QixNQUFNLEVBQUUsb0JBQW9CO0lBQzVCLFFBQVEsRUFBRSxxQkFBcUI7SUFDL0IsS0FBSyxFQUFFLGdCQUFnQjtJQUN2QixTQUFTLEVBQUUsdUJBQXVCO0lBQ2xDLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsT0FBTyxFQUFFLDJCQUEyQjtJQUNwQyxPQUFPLEVBQUUsK0JBQStCO0lBQ3hDLE1BQU0sRUFBRSxpQkFBaUI7SUFDekIsV0FBVyxFQUFFLG1DQUFtQztJQUNoRCxLQUFLLEVBQUUsZ0JBQWdCO0lBQ3ZCLE1BQU0sRUFBRSxnQkFBZ0I7Q0FDM0IsQ0FBQyJ9//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1yb3V0ZXJvcy9kaXN0L21lc3NhZ2VzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFlO0FBQ2Y7QUFDQSxxREFBcUQsT0FBTztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsVUFBVTtBQUM1QyxnRUFBZ0UsS0FBSztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Npc3RlbWEtYXNzaW5hdHVyYXMvLi9ub2RlX21vZHVsZXMvbm9kZS1yb3V0ZXJvcy9kaXN0L21lc3NhZ2VzLmpzP2QwOTUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gICAgVU5SRUdJU1RFUkVEVEFHOiBcIlJlY2VpdmVkIGRhdGEgb24gdW5yZWdpc3RlcmVkIHRhZy4gVGhpcyBpcyBhbiBlcnJvciBvbiB0aGlzIEFQSSBpdHNlbGYgYW5kIHNob3VsZG4ndCBoYXZlIGhhcHBlbmVkLlwiLFxuICAgIFVOS05PV05SRVBMWTogJ1RyaWVkIHRvIHByb2Nlc3MgdW5rbm93biByZXBseToge3tyZXBseX19JyxcbiAgICBDQU5UTE9HSU46ICdVc2VybmFtZSBvciBwYXNzd29yZCBpcyBpbnZhbGlkJyxcbiAgICBTVFJFQU1DTE9TRDogJ1N0cmVhbWluZyBpcyBjbG9zZWQnLFxuICAgIEFMUkRZU1RSRUFNSU5HOiAnQWxyZWFkeSBzdHJlYW1pbmcnLFxuICAgIENBTlRXUlRXSExTVFJNRzogJ0Nhbm5vdCB3cml0ZSBvdmVyIHRoZSBzYW1lIGNoYW5uZWwgdGhhdCBpcyBzdHJlYW1pbmcnLFxuICAgIEFMUkRZQ0xPU05HOiAnQ29ubmVjdGlvbiBhbHJlYWR5IGNsb3NpbmcnLFxuICAgIEFMUkRZQ09OTkVDVElORzogJ0FscmVhZHkgY29ubmVjdGluZycsXG4gICAgU09DS1RNT1VUOiAnVGltZWQgb3V0IGFmdGVyIHt7c2Vjb25kc319IHNlY29uZHMnLFxuICAgIFJFRk5PVEZORDogJ0l0ZW0gbm90IGZvdW5kIHdpdGggdGhlIHJlZmVyZW5jZSBwcm92aWRlZCBpbiB7e2tleX19JyxcbiAgICBFMkJJRzogJ0FyZ3VtZW50IGxpc3QgdG9vIGxvbmcuJyxcbiAgICBFQUNDRVM6ICdQZXJtaXNzaW9uIGRlbmllZC4nLFxuICAgIEVBRERSSU5VU0U6ICdBZGRyZXNzIGFscmVhZHkgaW4gdXNlLicsXG4gICAgRUFERFJOT1RBVkFJTDogJ0FkZHJlc3Mgbm90IGF2YWlsYWJsZS4nLFxuICAgIEVBRk5PU1VQUE9SVDogJ0FkZHJlc3MgZmFtaWx5IG5vdCBzdXBwb3J0ZWQuJyxcbiAgICBFQUdBSU46ICdSZXNvdXJjZSB0ZW1wb3JhcmlseSB1bmF2YWlsYWJsZS4nLFxuICAgIEVBTFJFQURZOiAnQ29ubmVjdGlvbiBhbHJlYWR5IGluIHByb2dyZXNzLicsXG4gICAgRUJBREU6ICdJbnZhbGlkIGV4Y2hhbmdlLicsXG4gICAgRUJBREY6ICdCYWQgZmlsZSBkZXNjcmlwdG9yLicsXG4gICAgRUJBREZEOiAnRmlsZSBkZXNjcmlwdG9yIGluIGJhZCBzdGF0ZS4nLFxuICAgIEVCQURNU0c6ICdCYWQgbWVzc2FnZS4nLFxuICAgIEVCQURSOiAnSW52YWxpZCByZXF1ZXN0IGRlc2NyaXB0b3IuJyxcbiAgICBFQkFEUlFDOiAnSW52YWxpZCByZXF1ZXN0IGNvZGUuJyxcbiAgICBFQkFEU0xUOiAnSW52YWxpZCBzbG90LicsXG4gICAgRUJVU1k6ICdEZXZpY2Ugb3IgcmVzb3VyY2UgYnVzeS4nLFxuICAgIEVDQU5DRUxFRDogJ09wZXJhdGlvbiBjYW5jZWxlZC4nLFxuICAgIEVDSElMRDogJ05vIGNoaWxkIHByb2Nlc3Nlcy4nLFxuICAgIEVDSFJORzogJ0NoYW5uZWwgbnVtYmVyIG91dCBvZiByYW5nZS4nLFxuICAgIEVDT01NOiAnQ29tbXVuaWNhdGlvbiBlcnJvciBvbiBzZW5kLicsXG4gICAgRUNPTk5BQk9SVEVEOiAnQ29ubmVjdGlvbiBhYm9ydGVkLicsXG4gICAgRUNPTk5SRUZVU0VEOiAnQ29ubmVjdGlvbiByZWZ1c2VkLicsXG4gICAgRUNPTk5SRVNFVDogJ0Nvbm5lY3Rpb24gcmVzZXQuJyxcbiAgICBFREVBRExLOiAnUmVzb3VyY2UgZGVhZGxvY2sgYXZvaWRlZC4nLFxuICAgIEVERUFETE9DSzogJ1Jlc291cmNlIGRlYWRsb2NrIGF2b2lkZWQuJyxcbiAgICBFREVTVEFERFJSRVE6ICdEZXN0aW5hdGlvbiBhZGRyZXNzIHJlcXVpcmVkLicsXG4gICAgRURPTTogJ01hdGhlbWF0aWNzIGFyZ3VtZW50IG91dCBvZiBkb21haW4gb2YgZnVuY3Rpb24nLFxuICAgIEVEUVVPVDogJ0Rpc2sgcXVvdGEgZXhjZWVkZWQuJyxcbiAgICBFRVhJU1Q6ICdGaWxlIGV4aXN0cy4nLFxuICAgIEVGQVVMVDogJ0JhZCBhZGRyZXNzLicsXG4gICAgRUZCSUc6ICdGaWxlIHRvbyBsYXJnZS4nLFxuICAgIEVIT1NURE9XTjogJ0hvc3QgaXMgZG93bi4nLFxuICAgIEVIT1NUVU5SRUFDSDogJ0hvc3QgaXMgdW5yZWFjaGFibGUuJyxcbiAgICBFSURSTTogJ0lkZW50aWZpZXIgcmVtb3ZlZC4nLFxuICAgIEVJTFNFUTogJ0ludmFsaWQgb3IgaW5jb21wbGV0ZSBtdWx0aWJ5dGUgb3Igd2lkZSBjaGFyYWN0ZXInLFxuICAgIEVJTlBST0dSRVNTOiAnT3BlcmF0aW9uIGluIHByb2dyZXNzLicsXG4gICAgRUlOVFI6ICdJbnRlcnJ1cHRlZCBmdW5jdGlvbiBjYWxsLicsXG4gICAgRUlOVkFMOiAnSW52YWxpZCBhcmd1bWVudC4nLFxuICAgIEVJTzogJ0lucHV0L291dHB1dCBlcnJvci4nLFxuICAgIEVJU0NPTk46ICdTb2NrZXQgaXMgY29ubmVjdGVkLicsXG4gICAgRUlTRElSOiAnSXMgYSBkaXJlY3RvcnkuJyxcbiAgICBFSVNOQU06ICdJcyBhIG5hbWVkIHR5cGUgZmlsZS4nLFxuICAgIEVLRVlFWFBJUkVEOiAnS2V5IGhhcyBleHBpcmVkLicsXG4gICAgRUtFWVJFSkVDVEVEOiAnS2V5IHdhcyByZWplY3RlZCBieSBzZXJ2aWNlLicsXG4gICAgRUtFWVJFVk9LRUQ6ICdLZXkgaGFzIGJlZW4gcmV2b2tlZC4nLFxuICAgIEVMMkhMVDogJ0xldmVsIDIgaGFsdGVkLicsXG4gICAgRUwyTlNZTkM6ICdMZXZlbCAyIG5vdCBzeW5jaHJvbml6ZWQuJyxcbiAgICBFTDNITFQ6ICdMZXZlbCAzIGhhbHRlZC4nLFxuICAgIEVMM1JTVDogJ0xldmVsIDMgcmVzZXQuJyxcbiAgICBFTElCQUNDOiAnQ2Fubm90IGFjY2VzcyBhIG5lZWRlZCBzaGFyZWQgbGlicmFyeS4nLFxuICAgIEVMSUJCQUQ6ICdBY2Nlc3NpbmcgYSBjb3JydXB0ZWQgc2hhcmVkIGxpYnJhcnkuJyxcbiAgICBFTElCTUFYOiAnQXR0ZW1wdGluZyB0byBsaW5rIGluIHRvbyBtYW55IHNoYXJlZCBsaWJyYXJpZXMuJyxcbiAgICBFTElCU0NOOiAnLmxpYiBzZWN0aW9uIGluIGEub3V0IGNvcnJ1cHRlZCcsXG4gICAgRUxJQkVYRUM6ICdDYW5ub3QgZXhlYyBhIHNoYXJlZCBsaWJyYXJ5IGRpcmVjdGx5LicsXG4gICAgRUxPT1A6ICdUb28gbWFueSBsZXZlbHMgb2Ygc3ltYm9saWMgbGlua3MuJyxcbiAgICBFTUVESVVNVFlQRTogJ1dyb25nIG1lZGl1bSB0eXBlLicsXG4gICAgRU1GSUxFOiAnVG9vIG1hbnkgb3BlbiBmaWxlcy4nLFxuICAgIEVNTElOSzogJ1RvbyBtYW55IGxpbmtzLicsXG4gICAgRU1TR1NJWkU6ICdNZXNzYWdlIHRvbyBsb25nLicsXG4gICAgRU1VTFRJSE9QOiAnTXVsdGlob3AgYXR0ZW1wdGVkLicsXG4gICAgRU5BTUVUT09MT05HOiAnRmlsZW5hbWUgdG9vIGxvbmcuJyxcbiAgICBFTkVURE9XTjogJ05ldHdvcmsgaXMgZG93bi4nLFxuICAgIEVORVRSRVNFVDogJ0Nvbm5lY3Rpb24gYWJvcnRlZCBieSBuZXR3b3JrLicsXG4gICAgRU5FVFVOUkVBQ0g6ICdOZXR3b3JrIHVucmVhY2hhYmxlLicsXG4gICAgRU5GSUxFOiAnVG9vIG1hbnkgb3BlbiBmaWxlcyBpbiBzeXN0ZW0uJyxcbiAgICBFTk9CVUZTOiAnTm8gYnVmZmVyIHNwYWNlIGF2YWlsYWJsZScsXG4gICAgRU5PREFUQTogJ05vIG1lc3NhZ2UgaXMgYXZhaWxhYmxlIG9uIHRoZSBTVFJFQU0gaGVhZCByZWFkIHF1ZXVlLicsXG4gICAgRU5PREVWOiAnTm8gc3VjaCBkZXZpY2UuJyxcbiAgICBFTk9FTlQ6ICdObyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5LicsXG4gICAgRU5PRVhFQzogJ0V4ZWMgZm9ybWF0IGVycm9yLicsXG4gICAgRU5PS0VZOiAnUmVxdWlyZWQga2V5IG5vdCBhdmFpbGFibGUuJyxcbiAgICBFTk9MQ0s6ICdObyBsb2NrcyBhdmFpbGFibGUuJyxcbiAgICBFTk9MSU5LOiAnTGluayBoYXMgYmVlbiBzZXZlcmVkLicsXG4gICAgRU5PTUVESVVNOiAnTm8gbWVkaXVtIGZvdW5kLicsXG4gICAgRU5PTUVNOiAnTm90IGVub3VnaCBzcGFjZS4nLFxuICAgIEVOT01TRzogJ05vIG1lc3NhZ2Ugb2YgdGhlIGRlc2lyZWQgdHlwZS4nLFxuICAgIEVOT05FVDogJ01hY2hpbmUgaXMgbm90IG9uIHRoZSBuZXR3b3JrLicsXG4gICAgRU5PUEtHOiAnUGFja2FnZSBub3QgaW5zdGFsbGVkLicsXG4gICAgRU5PUFJPVE9PUFQ6ICdQcm90b2NvbCBub3QgYXZhaWxhYmxlLicsXG4gICAgRU5PU1BDOiAnTm8gc3BhY2UgbGVmdCBvbiBkZXZpY2UuJyxcbiAgICBFTk9TUjogJ05vIFNUUkVBTSByZXNvdXJjZXMuJyxcbiAgICBFTk9TVFI6ICdOb3QgYSBTVFJFQU0uJyxcbiAgICBFTk9TWVM6ICdGdW5jdGlvbiBub3QgaW1wbGVtZW50ZWQuJyxcbiAgICBFTk9UQkxLOiAnQmxvY2sgZGV2aWNlIHJlcXVpcmVkLicsXG4gICAgRU5PVENPTk46ICdUaGUgc29ja2V0IGlzIG5vdCBjb25uZWN0ZWQuJyxcbiAgICBFTk9URElSOiAnTm90IGEgZGlyZWN0b3J5LicsXG4gICAgRU5PVEVNUFRZOiAnRGlyZWN0b3J5IG5vdCBlbXB0eS4nLFxuICAgIEVOT1RTT0NLOiAnTm90IGEgc29ja2V0LicsXG4gICAgRU5PVFNVUDogJ09wZXJhdGlvbiBub3Qgc3VwcG9ydGVkLicsXG4gICAgRU5PVFRZOiAnSW5hcHByb3ByaWF0ZSBJL08gY29udHJvbCBvcGVyYXRpb24uJyxcbiAgICBFTk9UVU5JUTogJ05hbWUgbm90IHVuaXF1ZSBvbiBuZXR3b3JrLicsXG4gICAgRU5YSU86ICdObyBzdWNoIGRldmljZSBvciBhZGRyZXNzLicsXG4gICAgRU9QTk9UU1VQUDogJ09wZXJhdGlvbiBub3Qgc3VwcG9ydGVkIG9uIHNvY2tldC4nLFxuICAgIEVPVkVSRkxPVzogJ1ZhbHVlIHRvbyBsYXJnZSB0byBiZSBzdG9yZWQgaW4gZGF0YSB0eXBlLicsXG4gICAgRVBFUk06ICdPcGVyYXRpb24gbm90IHBlcm1pdHRlZC4nLFxuICAgIEVQRk5PU1VQUE9SVDogJ1Byb3RvY29sIGZhbWlseSBub3Qgc3VwcG9ydGVkLicsXG4gICAgRVBJUEU6ICdCcm9rZW4gcGlwZS4nLFxuICAgIEVQUk9UTzogJ1Byb3RvY29sIGVycm9yLicsXG4gICAgRVBST1RPTk9TVVBQT1JUOiAnUHJvdG9jb2wgbm90IHN1cHBvcnRlZC4nLFxuICAgIEVQUk9UT1RZUEU6ICdQcm90b2NvbCB3cm9uZyB0eXBlIGZvciBzb2NrZXQuJyxcbiAgICBFUkFOR0U6ICdSZXN1bHQgdG9vIGxhcmdlLicsXG4gICAgRVJFTUNIRzogJ1JlbW90ZSBhZGRyZXNzIGNoYW5nZWQuJyxcbiAgICBFUkVNT1RFOiAnT2JqZWN0IGlzIHJlbW90ZS4nLFxuICAgIEVSRU1PVEVJTzogJ1JlbW90ZSBJL08gZXJyb3IuJyxcbiAgICBFUkVTVEFSVDogJ0ludGVycnVwdGVkIHN5c3RlbSBjYWxsIHNob3VsZCBiZSByZXN0YXJ0ZWQuJyxcbiAgICBFUk9GUzogJ1JlYWQtb25seSBmaWxlc3lzdGVtLicsXG4gICAgRVNIVVRET1dOOiAnQ2Fubm90IHNlbmQgYWZ0ZXIgdHJhbnNwb3J0IGVuZHBvaW50IHNodXRkb3duLicsXG4gICAgRVNQSVBFOiAnSW52YWxpZCBzZWVrLicsXG4gICAgRVNPQ0tUTk9TVVBQT1JUOiAnU29ja2V0IHR5cGUgbm90IHN1cHBvcnRlZC4nLFxuICAgIEVTUkNIOiAnTm8gc3VjaCBwcm9jZXNzLicsXG4gICAgRVNUQUxFOiAnU3RhbGUgZmlsZSBoYW5kbGUuJyxcbiAgICBFU1RSUElQRTogJ1N0cmVhbXMgcGlwZSBlcnJvci4nLFxuICAgIEVUSU1FOiAnVGltZXIgZXhwaXJlZC4nLFxuICAgIEVUSU1FRE9VVDogJ0Nvbm5lY3Rpb24gdGltZWQgb3V0LicsXG4gICAgRVRYVEJTWTogJ1RleHQgZmlsZSBidXN5LicsXG4gICAgRVVDTEVBTjogJ1N0cnVjdHVyZSBuZWVkcyBjbGVhbmluZy4nLFxuICAgIEVVTkFUQ0g6ICdQcm90b2NvbCBkcml2ZXIgbm90IGF0dGFjaGVkLicsXG4gICAgRVVTRVJTOiAnVG9vIG1hbnkgdXNlcnMuJyxcbiAgICBFV09VTERCTE9DSzogJ1Jlc291cmNlIHRlbXBvcmFyaWx5IHVuYXZhaWxhYmxlLicsXG4gICAgRVhERVY6ICdJbXByb3BlciBsaW5rLicsXG4gICAgRVhGVUxMOiAnRXhjaGFuZ2UgZnVsbC4nLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWJXVnpjMkZuWlhNdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk5emNtTXZiV1Z6YzJGblpYTXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFTeHJRa0ZCWlR0SlFVTllMR1ZCUVdVc1JVRkRXQ3h4UjBGQmNVYzdTVUZEZWtjc1dVRkJXU3hGUVVGRkxESkRRVUV5UXp0SlFVTjZSQ3hUUVVGVExFVkJRVVVzYVVOQlFXbERPMGxCUXpWRExGZEJRVmNzUlVGQlJTeHhRa0ZCY1VJN1NVRkRiRU1zWTBGQll5eEZRVUZGTEcxQ1FVRnRRanRKUVVOdVF5eGxRVUZsTEVWQlFVVXNjMFJCUVhORU8wbEJRM1pGTEZkQlFWY3NSVUZCUlN3MFFrRkJORUk3U1VGRGVrTXNaVUZCWlN4RlFVRkZMRzlDUVVGdlFqdEpRVU55UXl4VFFVRlRMRVZCUVVVc2NVTkJRWEZETzBsQlEyaEVMRk5CUVZNc1JVRkJSU3gxUkVGQmRVUTdTVUZEYkVVc1MwRkJTeXhGUVVGRkxIbENRVUY1UWp0SlFVTm9ReXhOUVVGTkxFVkJRVVVzYjBKQlFXOUNPMGxCUXpWQ0xGVkJRVlVzUlVGQlJTeDVRa0ZCZVVJN1NVRkRja01zWVVGQllTeEZRVUZGTEhkQ1FVRjNRanRKUVVOMlF5eFpRVUZaTEVWQlFVVXNLMEpCUVN0Q08wbEJRemRETEUxQlFVMHNSVUZCUlN4dFEwRkJiVU03U1VGRE0wTXNVVUZCVVN4RlFVRkZMR2xEUVVGcFF6dEpRVU16UXl4TFFVRkxMRVZCUVVVc2JVSkJRVzFDTzBsQlF6RkNMRXRCUVVzc1JVRkJSU3h6UWtGQmMwSTdTVUZETjBJc1RVRkJUU3hGUVVGRkxDdENRVUVyUWp0SlFVTjJReXhQUVVGUExFVkJRVVVzWTBGQll6dEpRVU4yUWl4TFFVRkxMRVZCUVVVc05rSkJRVFpDTzBsQlEzQkRMRTlCUVU4c1JVRkJSU3gxUWtGQmRVSTdTVUZEYUVNc1QwRkJUeXhGUVVGRkxHVkJRV1U3U1VGRGVFSXNTMEZCU3l4RlFVRkZMREJDUVVFd1FqdEpRVU5xUXl4VFFVRlRMRVZCUVVVc2NVSkJRWEZDTzBsQlEyaERMRTFCUVUwc1JVRkJSU3h4UWtGQmNVSTdTVUZETjBJc1RVRkJUU3hGUVVGRkxEaENRVUU0UWp0SlFVTjBReXhMUVVGTExFVkJRVVVzT0VKQlFUaENPMGxCUTNKRExGbEJRVmtzUlVGQlJTeHhRa0ZCY1VJN1NVRkRia01zV1VGQldTeEZRVUZGTEhGQ1FVRnhRanRKUVVOdVF5eFZRVUZWTEVWQlFVVXNiVUpCUVcxQ08wbEJReTlDTEU5QlFVOHNSVUZCUlN3MFFrRkJORUk3U1VGRGNrTXNVMEZCVXl4RlFVRkZMRFJDUVVFMFFqdEpRVU4yUXl4WlFVRlpMRVZCUVVVc0swSkJRU3RDTzBsQlF6ZERMRWxCUVVrc1JVRkJSU3huUkVGQlowUTdTVUZEZEVRc1RVRkJUU3hGUVVGRkxITkNRVUZ6UWp0SlFVTTVRaXhOUVVGTkxFVkJRVVVzWTBGQll6dEpRVU4wUWl4TlFVRk5MRVZCUVVVc1kwRkJZenRKUVVOMFFpeExRVUZMTEVWQlFVVXNhVUpCUVdsQ08wbEJRM2hDTEZOQlFWTXNSVUZCUlN4bFFVRmxPMGxCUXpGQ0xGbEJRVmtzUlVGQlJTeHpRa0ZCYzBJN1NVRkRjRU1zUzBGQlN5eEZRVUZGTEhGQ1FVRnhRanRKUVVNMVFpeE5RVUZOTEVWQlFVVXNiVVJCUVcxRU8wbEJRek5FTEZkQlFWY3NSVUZCUlN4M1FrRkJkMEk3U1VGRGNrTXNTMEZCU3l4RlFVRkZMRFJDUVVFMFFqdEpRVU51UXl4TlFVRk5MRVZCUVVVc2JVSkJRVzFDTzBsQlF6TkNMRWRCUVVjc1JVRkJSU3h4UWtGQmNVSTdTVUZETVVJc1QwRkJUeXhGUVVGRkxITkNRVUZ6UWp0SlFVTXZRaXhOUVVGTkxFVkJRVVVzYVVKQlFXbENPMGxCUTNwQ0xFMUJRVTBzUlVGQlJTeDFRa0ZCZFVJN1NVRkRMMElzVjBGQlZ5eEZRVUZGTEd0Q1FVRnJRanRKUVVNdlFpeFpRVUZaTEVWQlFVVXNPRUpCUVRoQ08wbEJRelZETEZkQlFWY3NSVUZCUlN4MVFrRkJkVUk3U1VGRGNFTXNUVUZCVFN4RlFVRkZMR2xDUVVGcFFqdEpRVU42UWl4UlFVRlJMRVZCUVVVc01rSkJRVEpDTzBsQlEzSkRMRTFCUVUwc1JVRkJSU3hwUWtGQmFVSTdTVUZEZWtJc1RVRkJUU3hGUVVGRkxHZENRVUZuUWp0SlFVTjRRaXhQUVVGUExFVkJRVVVzZDBOQlFYZERPMGxCUTJwRUxFOUJRVThzUlVGQlJTeDFRMEZCZFVNN1NVRkRhRVFzVDBGQlR5eEZRVUZGTEd0RVFVRnJSRHRKUVVNelJDeFBRVUZQTEVWQlFVVXNhVU5CUVdsRE8wbEJRekZETEZGQlFWRXNSVUZCUlN4M1EwRkJkME03U1VGRGJFUXNTMEZCU3l4RlFVRkZMRzlEUVVGdlF6dEpRVU16UXl4WFFVRlhMRVZCUVVVc2IwSkJRVzlDTzBsQlEycERMRTFCUVUwc1JVRkJSU3h6UWtGQmMwSTdTVUZET1VJc1RVRkJUU3hGUVVGRkxHbENRVUZwUWp0SlFVTjZRaXhSUVVGUkxFVkJRVVVzYlVKQlFXMUNPMGxCUXpkQ0xGTkJRVk1zUlVGQlJTeHhRa0ZCY1VJN1NVRkRhRU1zV1VGQldTeEZRVUZGTEc5Q1FVRnZRanRKUVVOc1F5eFJRVUZSTEVWQlFVVXNhMEpCUVd0Q08wbEJRelZDTEZOQlFWTXNSVUZCUlN4blEwRkJaME03U1VGRE0wTXNWMEZCVnl4RlFVRkZMSE5DUVVGelFqdEpRVU51UXl4TlFVRk5MRVZCUVVVc1owTkJRV2RETzBsQlEzaERMRTlCUVU4c1JVRkJSU3d5UWtGQk1rSTdTVUZEY0VNc1QwRkJUeXhGUVVGRkxIZEVRVUYzUkR0SlFVTnFSU3hOUVVGTkxFVkJRVVVzYVVKQlFXbENPMGxCUTNwQ0xFMUJRVTBzUlVGQlJTdzBRa0ZCTkVJN1NVRkRjRU1zVDBGQlR5eEZRVUZGTEc5Q1FVRnZRanRKUVVNM1FpeE5RVUZOTEVWQlFVVXNOa0pCUVRaQ08wbEJRM0pETEUxQlFVMHNSVUZCUlN4eFFrRkJjVUk3U1VGRE4wSXNUMEZCVHl4RlFVRkZMSGRDUVVGM1FqdEpRVU5xUXl4VFFVRlRMRVZCUVVVc2EwSkJRV3RDTzBsQlF6ZENMRTFCUVUwc1JVRkJSU3h0UWtGQmJVSTdTVUZETTBJc1RVRkJUU3hGUVVGRkxHbERRVUZwUXp0SlFVTjZReXhOUVVGTkxFVkJRVVVzWjBOQlFXZERPMGxCUTNoRExFMUJRVTBzUlVGQlJTeDNRa0ZCZDBJN1NVRkRhRU1zVjBGQlZ5eEZRVUZGTEhsQ1FVRjVRanRKUVVOMFF5eE5RVUZOTEVWQlFVVXNNRUpCUVRCQ08wbEJRMnhETEV0QlFVc3NSVUZCUlN4elFrRkJjMEk3U1VGRE4wSXNUVUZCVFN4RlFVRkZMR1ZCUVdVN1NVRkRka0lzVFVGQlRTeEZRVUZGTERKQ1FVRXlRanRKUVVOdVF5eFBRVUZQTEVWQlFVVXNkMEpCUVhkQ08wbEJRMnBETEZGQlFWRXNSVUZCUlN3NFFrRkJPRUk3U1VGRGVFTXNUMEZCVHl4RlFVRkZMR3RDUVVGclFqdEpRVU16UWl4VFFVRlRMRVZCUVVVc2MwSkJRWE5DTzBsQlEycERMRkZCUVZFc1JVRkJSU3hsUVVGbE8wbEJRM3BDTEU5QlFVOHNSVUZCUlN3d1FrRkJNRUk3U1VGRGJrTXNUVUZCVFN4RlFVRkZMSE5EUVVGelF6dEpRVU01UXl4UlFVRlJMRVZCUVVVc05rSkJRVFpDTzBsQlEzWkRMRXRCUVVzc1JVRkJSU3cwUWtGQk5FSTdTVUZEYmtNc1ZVRkJWU3hGUVVGRkxHOURRVUZ2UXp0SlFVTm9SQ3hUUVVGVExFVkJRVVVzTkVOQlFUUkRPMGxCUTNaRUxFdEJRVXNzUlVGQlJTd3dRa0ZCTUVJN1NVRkRha01zV1VGQldTeEZRVUZGTEdkRFFVRm5RenRKUVVNNVF5eExRVUZMTEVWQlFVVXNZMEZCWXp0SlFVTnlRaXhOUVVGTkxFVkJRVVVzYVVKQlFXbENPMGxCUTNwQ0xHVkJRV1VzUlVGQlJTeDVRa0ZCZVVJN1NVRkRNVU1zVlVGQlZTeEZRVUZGTEdsRFFVRnBRenRKUVVNM1F5eE5RVUZOTEVWQlFVVXNiVUpCUVcxQ08wbEJRek5DTEU5QlFVOHNSVUZCUlN4NVFrRkJlVUk3U1VGRGJFTXNUMEZCVHl4RlFVRkZMRzFDUVVGdFFqdEpRVU0xUWl4VFFVRlRMRVZCUVVVc2JVSkJRVzFDTzBsQlF6bENMRkZCUVZFc1JVRkJSU3c0UTBGQk9FTTdTVUZEZUVRc1MwRkJTeXhGUVVGRkxIVkNRVUYxUWp0SlFVTTVRaXhUUVVGVExFVkJRVVVzWjBSQlFXZEVPMGxCUXpORUxFMUJRVTBzUlVGQlJTeGxRVUZsTzBsQlEzWkNMR1ZCUVdVc1JVRkJSU3cwUWtGQk5FSTdTVUZETjBNc1MwRkJTeXhGUVVGRkxHdENRVUZyUWp0SlFVTjZRaXhOUVVGTkxFVkJRVVVzYjBKQlFXOUNPMGxCUXpWQ0xGRkJRVkVzUlVGQlJTeHhRa0ZCY1VJN1NVRkRMMElzUzBGQlN5eEZRVUZGTEdkQ1FVRm5RanRKUVVOMlFpeFRRVUZUTEVWQlFVVXNkVUpCUVhWQ08wbEJRMnhETEU5QlFVOHNSVUZCUlN4cFFrRkJhVUk3U1VGRE1VSXNUMEZCVHl4RlFVRkZMREpDUVVFeVFqdEpRVU53UXl4UFFVRlBMRVZCUVVVc0swSkJRU3RDTzBsQlEzaERMRTFCUVUwc1JVRkJSU3hwUWtGQmFVSTdTVUZEZWtJc1YwRkJWeXhGUVVGRkxHMURRVUZ0UXp0SlFVTm9SQ3hMUVVGTExFVkJRVVVzWjBKQlFXZENPMGxCUTNaQ0xFMUJRVTBzUlVGQlJTeG5Ra0ZCWjBJN1EwRkRNMElzUTBGQlF5SjkiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-routeros/dist/messages.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-routeros/dist/utils.js":
/*!**************************************************!*\
  !*** ./node_modules/node-routeros/dist/utils.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.debounce = (callback, timeout = 0) => {\n    let timeoutObj = null;\n    return {\n        run: (...args) => {\n            const context = this;\n            clearTimeout(timeoutObj);\n            timeoutObj = setTimeout(() => callback.apply(context, args), timeout);\n        },\n        cancel: () => {\n            clearTimeout(timeoutObj);\n        },\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBYSxRQUFBLFFBQVEsR0FBRyxDQUFDLFFBQVEsRUFBRSxPQUFPLEdBQUcsQ0FBQyxFQUFFLEVBQUU7SUFDOUMsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDO0lBRXRCLE9BQU87UUFDSCxHQUFHLEVBQUUsQ0FBQyxHQUFHLElBQVMsRUFBRSxFQUFFO1lBQ2xCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQztZQUNyQixZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDekIsVUFBVSxHQUFHLFVBQVUsQ0FDbkIsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQ25DLE9BQU8sQ0FDVixDQUFDO1FBQ04sQ0FBQztRQUVELE1BQU0sRUFBRSxHQUFHLEVBQUU7WUFDVCxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDN0IsQ0FBQztLQUNKLENBQUM7QUFDTixDQUFDLENBQUMifQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1yb3V0ZXJvcy9kaXN0L3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2lzdGVtYS1hc3NpbmF0dXJhcy8uL25vZGVfbW9kdWxlcy9ub2RlLXJvdXRlcm9zL2Rpc3QvdXRpbHMuanM/YTE2OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVib3VuY2UgPSAoY2FsbGJhY2ssIHRpbWVvdXQgPSAwKSA9PiB7XG4gICAgbGV0IHRpbWVvdXRPYmogPSBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICAgIHJ1bjogKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzO1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRPYmopO1xuICAgICAgICAgICAgdGltZW91dE9iaiA9IHNldFRpbWVvdXQoKCkgPT4gY2FsbGJhY2suYXBwbHkoY29udGV4dCwgYXJncyksIHRpbWVvdXQpO1xuICAgICAgICB9LFxuICAgICAgICBjYW5jZWw6ICgpID0+IHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0T2JqKTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRYUnBiSE11YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTl6Y21NdmRYUnBiSE11ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJZU3hSUVVGQkxGRkJRVkVzUjBGQlJ5eERRVUZETEZGQlFWRXNSVUZCUlN4UFFVRlBMRWRCUVVjc1EwRkJReXhGUVVGRkxFVkJRVVU3U1VGRE9VTXNTVUZCU1N4VlFVRlZMRWRCUVVjc1NVRkJTU3hEUVVGRE8wbEJSWFJDTEU5QlFVODdVVUZEU0N4SFFVRkhMRVZCUVVVc1EwRkJReXhIUVVGSExFbEJRVk1zUlVGQlJTeEZRVUZGTzFsQlEyeENMRTFCUVUwc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF6dFpRVU55UWl4WlFVRlpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03V1VGRGVrSXNWVUZCVlN4SFFVRkhMRlZCUVZVc1EwRkRia0lzUjBGQlJ5eEZRVUZGTEVOQlFVTXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEVWQlEyNURMRTlCUVU4c1EwRkRWaXhEUVVGRE8xRkJRMDRzUTBGQlF6dFJRVVZFTEUxQlFVMHNSVUZCUlN4SFFVRkhMRVZCUVVVN1dVRkRWQ3haUVVGWkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdVVUZETjBJc1EwRkJRenRMUVVOS0xFTkJRVU03UVVGRFRpeERRVUZETEVOQlFVTWlmUT09Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-routeros/dist/utils.js\n");

/***/ })

};
;