// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("user") // user or admin
  phone     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions Subscription[]
}

model Subscription {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  planName    String
  price       Float
  status      String   // active, canceled, etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invoices Invoice[]
}

model Invoice {
  id             String       @id @default(cuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  amount         Float
  status         String       // paid, pending, etc.
  dueDate        DateTime
  paidAt         DateTime?
  createdAt      DateTime     @default(now())
}

model MikrotikDevice {
  id          String   @id @default(cuid())
  name        String   // Nome do dispositivo
  ip          String   // Endereço IP
  mac         String?  // Endereço MAC
  username    String   // Usuário para conexão
  password    String   // Senha para conexão
  port        Int      @default(8728) // Porta API (padrão 8728)
  status      String   @default("offline") // online, offline, error
  model       String?  // Modelo do dispositivo
  version     String?  // Versão do RouterOS
  uptime      String?  // Tempo de atividade
  cpu         Float?   // Uso da CPU (%)
  memory      Float?   // Uso da memória (%)
  interfaces  Int?     // Número de interfaces
  lastSeen    DateTime? // Última vez que foi visto online
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Domain {
  id            String   @id @default(cuid())
  name          String   @unique
  cloudflareId  String?  // zone id from Cloudflare
  status        String   @default("active") // active, pending, error
  nameservers   String?  // JSON stringified array of nameservers
  created       DateTime?
  expires       DateTime?
  sslStatus     String?  // active, pending, error
  dnsRecords    Int      @default(0)
  raw           String?  // raw JSON payload from Cloudflare as string
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Proxmox persistence (optional)
model ProxmoxServer {
  id           String   @id @default(cuid())
  name         String   @unique
  baseUrl      String   // e.g., https://host:8006/api2/json
  user         String   // e.g., root@pam
  tokenId      String   // token id (without user@realm!)
  tokenSecret  String   // token secret
  insecure     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  nodes        ProxmoxNode[]
  vms          ProxmoxVM[]
}
model ProxmoxNode {
  id        String   @id @default(cuid())
  name      String   @unique
  status    String?
  maxcpu    Int?
  maxmem    BigInt?
  cpu       Float?
  mem       BigInt?
  uptime    Int?
  raw       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  vms       ProxmoxVM[]

  // Multi-server
  serverId  String?
  server    ProxmoxServer? @relation(fields: [serverId], references: [id])

  @@unique([name, serverId])
}

model ProxmoxVM {
  id        String   @id @default(cuid())
  vmid      Int
  nodeName  String
  serverId  String?
  node      ProxmoxNode? @relation(fields: [nodeName, serverId], references: [name, serverId])
  name      String?
  type      String?
  status    String?
  maxcpu    Int?
  maxmem    BigInt?
  cpu       Float?
  mem       BigInt?
  tags      String?
  sshHost   String?
  sshPort   Int?
  sshUser   String?
  raw       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  metrics   ProxmoxMetric[]

  server    ProxmoxServer? @relation(fields: [serverId], references: [id])

  @@unique([vmid, nodeName, serverId])
}

model ProxmoxMetric {
  id        String   @id @default(cuid())
  vmId      String?
  vm        ProxmoxVM? @relation(fields: [vmId], references: [id], onDelete: Cascade)
  vmNumericId Int?
  nodeName  String?
  serverId  String?
  cpu       Float?
  mem       BigInt?
  disk      Float?
  netin     BigInt?
  netout    BigInt?
  ts        DateTime @default(now())
}

// Network inventory & documentation

enum IPStatus {
  AVAILABLE
  RESERVED
  ASSIGNED
}

enum DeviceType {
  ROUTER
  SWITCH
  FIREWALL
  SERVER
  VM
  AP
  NAS
  OTHER
}

enum Protocol {
  TCP
  UDP
  SCTP
  ICMP
  OTHER
}

model Site {
  id        String   @id @default(cuid())
  name      String   @unique
  address   String?
  notes     String?
  tags      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subnets   NetworkSubnet[]
  devices   NetworkDevice[]
  vlans     Vlan[]
}

model Vlan {
  id        String   @id @default(cuid())
  name      String
  vid       Int
  siteId    String?
  site      Site?    @relation(fields: [siteId], references: [id])
  description String?
  tags      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subnets   NetworkSubnet[]

  @@unique([vid, siteId])
}

model NetworkSubnet {
  id          String   @id @default(cuid())
  cidr        String   // e.g., 192.168.1.0/24
  name        String?
  description String?
  siteId      String?
  site        Site?    @relation(fields: [siteId], references: [id])
  vlanId      String?
  vlan        Vlan?    @relation(fields: [vlanId], references: [id])
  parentId    String?
  parent      NetworkSubnet? @relation("SubnetHierarchy", fields: [parentId], references: [id])
  children    NetworkSubnet[] @relation("SubnetHierarchy")
  gatewayIpId String?
  tags        String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ips         NetworkIP[]

  @@index([cidr])
}

model NetworkIP {
  id           String   @id @default(cuid())
  address      String   // IPv4/IPv6 address
  subnetId     String
  subnet       NetworkSubnet @relation(fields: [subnetId], references: [id], onDelete: Cascade)
  status       IPStatus @default(AVAILABLE)
  deviceId     String?
  device       NetworkDevice? @relation(fields: [deviceId], references: [id])
  interface    String?
  fqdn         String?
  purpose      String?
  mac          String?
  tags         String?
  notes        String?
  lastSeen     DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([address])
}

model NetworkDevice {
  id          String   @id @default(cuid())
  name        String
  type        DeviceType @default(OTHER)
  siteId      String?
  site        Site?    @relation(fields: [siteId], references: [id])
  mgmtIp      String?
  vendor      String?
  model       String?
  serial      String?
  osVersion   String?
  tags        String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  services    NetworkService[]
  ips         NetworkIP[]
}

model NetworkService {
  id          String   @id @default(cuid())
  deviceId    String
  device      NetworkDevice @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  name        String
  protocol    Protocol @default(TCP)
  port        Int
  externalPort Int?
  targetIp    String?
  targetFqdn  String?
  enabled     Boolean @default(true)
  description String?
  tags        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
